import{_ as s,c as a,o as n,a4 as e}from"./chunks/framework.ClEHkwpW.js";const t="/blog/assets/1711794002014.BkTbEobM.png",q=JSON.parse('{"title":"Node JS","description":"","frontmatter":{},"headers":[],"relativePath":"article/nodejs.md","filePath":"article/nodejs.md"}'),p={name:"article/nodejs.md"},o=e(`<h1 id="node-js" tabindex="-1">Node JS <a class="header-anchor" href="#node-js" aria-label="Permalink to &quot;Node JS&quot;">​</a></h1><blockquote><ol><li><strong>Node.js 中不能使用 BOM 和 DOM 的 API,可以使用</strong> <code>console</code>和定时器 API</li><li><strong>Node.js 中的顶级对象为</strong> <code>global,</code>也可以用 <code>globalThis</code>访问顶级对象</li></ol></blockquote><h2 id="buffer-缓冲器" tabindex="-1">Buffer（缓冲器） <a class="header-anchor" href="#buffer-缓冲器" aria-label="Permalink to &quot;Buffer（缓冲器）&quot;">​</a></h2><h3 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h3><p><strong>Buffer 是一个类似于 Array 的对象，用于表示固定长度的字节序列</strong></p><p><strong>Buffer 本质是一段固定长度的内存空间，用于处理二进制数据</strong></p><h3 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h3><ol><li><strong>Buffer 大小固定且无法调整</strong></li><li><strong>Buffer 性能较好，可以直接对计算机内存进行操作</strong></li><li><strong>每个元素的大小为 1 字节（byte）</strong></li></ol><h3 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h3><h5 id="创建-buffer" tabindex="-1">创建 Buffer <a class="header-anchor" href="#创建-buffer" aria-label="Permalink to &quot;创建 Buffer&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let buf = Buffer.alloc(10);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>let buf_2 = Buffer.allocUnsafe(10);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>let buf_3 = Buffer.from(&#39;hello&#39;);</span></span></code></pre></div><h5 id="buffer-与字符串的转换" tabindex="-1">Buffer 与字符串的转换 <a class="header-anchor" href="#buffer-与字符串的转换" aria-label="Permalink to &quot;Buffer 与字符串的转换&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let buf_4 = Buffer.from([105, 108, 111, 118, 101, 121, 111, 117]);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>console(buf_4.toString());</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&gt; iloveyou</span></span></code></pre></div><h5 id="buffer-的读写" tabindex="-1">Buffer 的读写 <a class="header-anchor" href="#buffer-的读写" aria-label="Permalink to &quot;Buffer 的读写&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// []</span></span>
<span class="line"><span>let buf = Buffer.from(&#39;hello&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>console.log(buf[0].toString(2)); //01101000</span></span></code></pre></div><h2 id="fs" tabindex="-1">fs <a class="header-anchor" href="#fs" aria-label="Permalink to &quot;fs&quot;">​</a></h2><p><strong>file system</strong></p><h3 id="文件写入" tabindex="-1">文件写入 <a class="header-anchor" href="#文件写入" aria-label="Permalink to &quot;文件写入&quot;">​</a></h3><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>writeFile</strong></td><td><strong>异步写入</strong></td></tr><tr><td><strong>writeFileSync</strong></td><td><strong>同步写入</strong></td></tr><tr><td><strong>appendFile/appendFileSync</strong></td><td><strong>追加写入</strong></td></tr><tr><td><strong>createWriteStream</strong></td><td><strong>流式写入</strong></td></tr></tbody></table><h4 id="writefile" tabindex="-1">writeFile <a class="header-anchor" href="#writefile" aria-label="Permalink to &quot;writeFile&quot;">​</a></h4><p><strong>语法：</strong><code>fs.writeFile(file, data[, options], callback)</code></p><p><strong>参数说明：</strong></p><ul><li><strong>file 文件名</strong></li><li><strong>data 待写入的数据</strong></li><li><strong>options 选项设置</strong></li><li><strong>callback 写入回调</strong></li></ul><p><strong>返回值：</strong><code>undefined</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const fs = require(&quot;fs&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fs.writeFile(&quot;./1.txt&quot;, &quot;hello world&quot;, (err) =&gt; {</span></span>
<span class="line"><span>  if (err) throw err;</span></span>
<span class="line"><span>  console.log(&quot;文件已被保存&quot;);</span></span>
<span class="line"><span>});</span></span></code></pre></div><h4 id="writefilesync" tabindex="-1">writeFileSync <a class="header-anchor" href="#writefilesync" aria-label="Permalink to &quot;writeFileSync&quot;">​</a></h4><p><strong>语法：</strong><code>fs.writeFileSync(file, data[, options])</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const fs = require(&quot;fs&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fs.writeFileSync(&quot;./1.txt&quot;, &quot;hello world&quot;);</span></span></code></pre></div><h4 id="appendfile" tabindex="-1">appendFile <a class="header-anchor" href="#appendfile" aria-label="Permalink to &quot;appendFile&quot;">​</a></h4><p><strong>语法：</strong><code>fs.writeFile(file, data[, options], callback)</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const fs = require(&quot;fs&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fs.appendFile(&quot;./1.txt&quot;, &quot;hello world&quot;, (err) =&gt; {</span></span>
<span class="line"><span>  if (err) throw err;</span></span>
<span class="line"><span>  console.log(&quot;文件已被保存&quot;);</span></span>
<span class="line"><span>});</span></span></code></pre></div><h4 id="appendfilesync" tabindex="-1">appendFileSync <a class="header-anchor" href="#appendfilesync" aria-label="Permalink to &quot;appendFileSync&quot;">​</a></h4><p><strong>语法：</strong><code>fs.appendFileSync(file, data[, options])</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const fs = require(&quot;fs&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fs.appendFileSync(&quot;./1.txt&quot;, &quot;hello world&quot;);</span></span></code></pre></div><blockquote><p><code>fs.writeFile(&quot;./1.txt&quot;, &quot;hello world&quot;,{flag:a}, (err) =&gt; {</code> &gt; <code>if (err) throw err;</code> &gt; <code>console.log(&quot;文件已被保存&quot;);</code> &gt; <code>});</code>同样能实现追加功能</p></blockquote><h4 id="createwritestream" tabindex="-1">createWriteStream <a class="header-anchor" href="#createwritestream" aria-label="Permalink to &quot;createWriteStream&quot;">​</a></h4><p><strong>语法：</strong><code>fs.createWriteStream(file)</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const ws = fs.createWriteStream(&quot;./1.txt&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ws.write(&quot;hello world&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ws.close();</span></span></code></pre></div><h3 id="文件读取" tabindex="-1">文件读取 <a class="header-anchor" href="#文件读取" aria-label="Permalink to &quot;文件读取&quot;">​</a></h3><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>readFile</strong></td><td><strong>异步读取</strong></td></tr><tr><td><strong>readFileSync</strong></td><td><strong>同步读取</strong></td></tr><tr><td><strong>createReadStream</strong></td><td><strong>流式读取</strong></td></tr></tbody></table><h4 id="readfile" tabindex="-1">readFile <a class="header-anchor" href="#readfile" aria-label="Permalink to &quot;readFile&quot;">​</a></h4><p><strong>语法：</strong><code>fs.readFile(path[, options], callback)</code></p><p><strong>参数说明：</strong></p><ul><li><strong>path 文件路径</strong></li><li><strong>options 选项配置</strong></li><li><strong>callback 回调函数</strong></li></ul><p><strong>返回值：</strong><code>undefined</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const fs = require(&quot;fs&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fs.readFile(&quot;./1.txt&quot;, (err, data) =&gt; {</span></span>
<span class="line"><span>    if (err) throw err;</span></span>
<span class="line"><span>    console.log(data.toString());</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>);</span></span></code></pre></div><h4 id="readfilesync" tabindex="-1">readFileSync <a class="header-anchor" href="#readfilesync" aria-label="Permalink to &quot;readFileSync&quot;">​</a></h4><p><strong>语法：</strong><code>fs.readFile(path[, options])</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const data = fs.readFileSync(&quot;./1.txt&quot;);</span></span></code></pre></div><h4 id="createreadstream" tabindex="-1">createReadStream <a class="header-anchor" href="#createreadstream" aria-label="Permalink to &quot;createReadStream&quot;">​</a></h4><p><strong>语法：</strong><code>fs.createReadStream(file)</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const rs = fs.createReadStream(&quot;./1.txt&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>rs.on(&quot;data&quot;, (chunk) =&gt; {</span></span>
<span class="line"><span>    console.log(chunk.toString());</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>rs.on(&quot;end&quot;, () =&gt; {</span></span>
<span class="line"><span>    console.log(&quot;end&quot;);</span></span>
<span class="line"><span>});</span></span></code></pre></div><h3 id="文件复制" tabindex="-1">文件复制 <a class="header-anchor" href="#文件复制" aria-label="Permalink to &quot;文件复制&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const fs = require(&#39;fs&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//方式一</span></span>
<span class="line"><span>let data = fs.readFileSync(&#39;./1.txt&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fs.writeFileSync(&#39;./2.txt&#39;, data);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//方式二</span></span>
<span class="line"><span>const rs = fs.createReadStream(&#39;./1.txt&#39;);</span></span>
<span class="line"><span>const ws = fs.createWriteStream(&#39;./3.txt&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>rs.on(&#39;data&#39;, (chunk) =&gt; {</span></span>
<span class="line"><span>    ws.write(chunk);</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// rs.pipe(ws)等价</span></span></code></pre></div><h3 id="文件移动与重命名" tabindex="-1">文件移动与重命名 <a class="header-anchor" href="#文件移动与重命名" aria-label="Permalink to &quot;文件移动与重命名&quot;">​</a></h3><p><strong>在 Node.js 中，我们可以使用</strong> <code>rename</code>或 <code>renameSync</code>来移动或重命名文件或文件夹</p><p><strong>语法：</strong></p><p><code>fs.rename(oldPath, newPath, callback)</code></p><p><code>fs.renameSync(oldPath, newPath)</code></p><p><strong>参数说明：</strong></p><ul><li><strong>oldPath 文件当前的路径</strong></li><li><strong>newPath 文件新的路径</strong></li><li><strong>callback 操作后的回调</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const fs = require(&quot;fs&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 重命名</span></span>
<span class="line"><span>fs.rename(&quot;1.txt&quot;, &quot;2.txt&quot;, (err) =&gt; {</span></span>
<span class="line"><span>  if (err) throw err;</span></span>
<span class="line"><span>  console.log(&quot;Rename complete!&quot;);</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 移动</span></span>
<span class="line"><span>fs.rename(&quot;1.txt&quot;, &quot;../data/1.txt&quot;, (err) =&gt; {</span></span>
<span class="line"><span>  if (err) throw err;</span></span>
<span class="line"><span>  console.log(&quot;Rename complete!&quot;);</span></span>
<span class="line"><span>});</span></span></code></pre></div><h3 id="删除文件" tabindex="-1">删除文件 <a class="header-anchor" href="#删除文件" aria-label="Permalink to &quot;删除文件&quot;">​</a></h3><p><strong>在 Node.js 中，我们可以使用</strong> <code>unlink</code>或 <code>unlinkSync</code>来删除文件</p><p><strong>语法：</strong></p><p><code>fs.unlink(path,callback)</code></p><p><code>fs.unlinkSync(path)</code></p><p><strong>参数说明：</strong></p><ul><li><strong>path 文件路径</strong></li><li><strong>callback 操作后的回调</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const fs = require(&quot;fs&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fs.unlink(&quot;./1.js&quot;, (err) =&gt; {</span></span>
<span class="line"><span>    if (err) {</span></span>
<span class="line"><span>        console.log(err);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    console.log(&quot;删除成功&quot;);</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//rm</span></span>
<span class="line"><span>fs.rm(&quot;./1.js&quot;, (err) =&gt; {</span></span>
<span class="line"><span>  if (err) {</span></span>
<span class="line"><span>    console.log(err);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  console.log(&quot;删除成功&quot;);</span></span>
<span class="line"><span>});</span></span></code></pre></div><h3 id="文件夹操作" tabindex="-1">文件夹操作 <a class="header-anchor" href="#文件夹操作" aria-label="Permalink to &quot;文件夹操作&quot;">​</a></h3><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>mkdir/mkdirSync</strong></td><td><strong>创建文件夹</strong></td></tr><tr><td><strong>readdir/readdirSync</strong></td><td><strong>读取文件夹</strong></td></tr><tr><td><strong>rmdir/rmdirSync</strong></td><td><strong>删除文件夹</strong></td></tr></tbody></table><h4 id="创建文件夹" tabindex="-1">创建文件夹 <a class="header-anchor" href="#创建文件夹" aria-label="Permalink to &quot;创建文件夹&quot;">​</a></h4><p><strong>在 Node.js 中，我们可以使用</strong> <code>mkdir</code>或 <code>mkdirSync</code>来创建文件夹</p><p><strong>语法：</strong></p><p><code>fs.mkdir(path[,options], callback)</code></p><p><code>fs.mkdirSync(path[,options])</code></p><p><strong>参数说明：</strong></p><ul><li><strong>path 文件夹路径</strong></li><li><strong>options 选项配置（可选）</strong></li><li><strong>callback 操作后的回调</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const fs = require(&quot;fs&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fs.mkdir(&quot;./test&quot;, (err) =&gt; {</span></span>
<span class="line"><span>  if (err) {</span></span>
<span class="line"><span>    console.log(err);</span></span>
<span class="line"><span>  } else {</span></span>
<span class="line"><span>    console.log(&quot;folder created&quot;);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 递归创建</span></span>
<span class="line"><span>fs.mkdir(&quot;./a/b/c&quot;, {recursive: true}, (err) =&gt; {</span></span>
<span class="line"><span>  if (err) {</span></span>
<span class="line"><span>    console.log(err);</span></span>
<span class="line"><span>  } else {</span></span>
<span class="line"><span>    console.log(&quot;folder created&quot;);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>});</span></span></code></pre></div><h4 id="读取文件夹" tabindex="-1">读取文件夹 <a class="header-anchor" href="#读取文件夹" aria-label="Permalink to &quot;读取文件夹&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>fs.readdir(&quot;test&quot;, (err, files) =&gt; {</span></span>
<span class="line"><span>  if (err) {</span></span>
<span class="line"><span>    console.log(err);</span></span>
<span class="line"><span>  } else {</span></span>
<span class="line"><span>    console.log(files);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>});</span></span></code></pre></div><h4 id="删除文件夹" tabindex="-1">删除文件夹 <a class="header-anchor" href="#删除文件夹" aria-label="Permalink to &quot;删除文件夹&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>fs.rmdir(&quot;test&quot;, (err) =&gt; {</span></span>
<span class="line"><span>  if (err) {</span></span>
<span class="line"><span>    console.log(err);</span></span>
<span class="line"><span>  } else {</span></span>
<span class="line"><span>    console.log(&quot;folder deleted&quot;);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 递归删除</span></span>
<span class="line"><span>fs.rmdir(&quot;./a&quot;, {recursive: true}, (err) =&gt; {</span></span>
<span class="line"><span>  if (err) {</span></span>
<span class="line"><span>    console.log(err);</span></span>
<span class="line"><span>  } else {</span></span>
<span class="line"><span>    console.log(&quot;folder deleted&quot;);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>});</span></span></code></pre></div><h3 id="查看资源状态" tabindex="-1">查看资源状态 <a class="header-anchor" href="#查看资源状态" aria-label="Permalink to &quot;查看资源状态&quot;">​</a></h3><p><strong>在 Node.js 中，我们可以使用</strong> <code>stat</code>或 <code>statSync</code>来查看资源的详细信息</p><p><strong>语法：</strong></p><p><code>fs.stat(path[,options],callback)</code></p><p><code>fs.statSync(path[,options])</code></p><p><strong>参数说明：</strong></p><ul><li><strong>path 文件夹路径</strong></li><li><strong>options 选项配置（可选）</strong></li><li><strong>callback 操作后的回调</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>fs.stat(&quot;1.js&quot;, (err, stats) =&gt; {</span></span>
<span class="line"><span>  if (err) {</span></span>
<span class="line"><span>    console.log(err);</span></span>
<span class="line"><span>  } else {</span></span>
<span class="line"><span>    console.log(stats);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  //isFile</span></span>
<span class="line"><span>  console.log(data.isFile());</span></span>
<span class="line"><span>  //isDirectory</span></span>
<span class="line"><span>  console.log(data.isDirectory());  </span></span>
<span class="line"><span>});</span></span></code></pre></div><h3 id="dirname" tabindex="-1">__dirname <a class="header-anchor" href="#dirname" aria-label="Permalink to &quot;\\_\\_dirname&quot;">​</a></h3><p><code>__dirname</code>与 <code>require</code>类似，都是 Node.js 环境中的&#39;全局&#39;变量</p><p><code>__dirname</code>保存着当前文件所在目录的绝对路径，可以使用__<strong>dirname 与文件名拼接成绝对路径</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let data fs.readFileSync(__dirname +/data.txt&#39;);</span></span>
<span class="line"><span>console.log(data);</span></span></code></pre></div><blockquote><p><strong>使用 fs 模块的时候，尽量使用__dirname 将路径转化为绝对路径，这样可以避免相对路径产生的 Bug</strong></p></blockquote><h2 id="path" tabindex="-1">path <a class="header-anchor" href="#path" aria-label="Permalink to &quot;path&quot;">​</a></h2><table><thead><tr><th><strong>API</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>path.resolve</strong></td><td><strong>拼接规范的绝对路径</strong></td></tr><tr><td><strong>path.sep</strong></td><td><strong>获取操作系统的路径分隔符</strong></td></tr><tr><td><strong>path.parse</strong></td><td><strong>解析路径并返回对象</strong></td></tr><tr><td><strong>path.basename</strong></td><td><strong>获取路径的基础名称</strong></td></tr><tr><td><strong>path.dirname</strong></td><td><strong>获取路径的目录名</strong></td></tr><tr><td><strong>path.extname</strong></td><td><strong>获取路径的扩展名</strong></td></tr></tbody></table><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const path = require(&#39;path&#39;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>path.resolve(__dirname, &#39;index.html&#39;);</span></span></code></pre></div><h2 id="http" tabindex="-1">http <a class="header-anchor" href="#http" aria-label="Permalink to &quot;http&quot;">​</a></h2><h3 id="创建-http" tabindex="-1">创建 http <a class="header-anchor" href="#创建-http" aria-label="Permalink to &quot;创建 http&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const http = require(&quot;http&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 创建服务对象</span></span>
<span class="line"><span>const server = http.createServer((req, res) =&gt; {</span></span>
<span class="line"><span>  res.end(&quot;Hello World&quot;);</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 监听端口，启动服务</span></span>
<span class="line"><span>server.listen(3000, () =&gt; {</span></span>
<span class="line"><span>  console.log(&quot;Server is running...&quot;);</span></span>
<span class="line"><span>});</span></span></code></pre></div><blockquote><p><strong>注意事项：</strong></p><ol><li><strong>命令行</strong> <code>crtl+c</code>停止服务</li><li><strong>当服务启动后，更新代码 必须重启服务才能生效</strong></li><li><strong>响应内容中文乱码的解决办法</strong><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>res.setHeader(&#39;content-type&#39;,&#39;text/html;charset=utf-8&#39;);</span></span></code></pre></div></li><li><strong>端口号被占用</strong><ol><li><strong>关闭当前正在运行监听端口的服务</strong></li><li><strong>修改其他端口号</strong></li></ol></li></ol></blockquote><h3 id="获取-http-请求报文" tabindex="-1">获取 HTTP 请求报文 <a class="header-anchor" href="#获取-http-请求报文" aria-label="Permalink to &quot;获取 HTTP 请求报文&quot;">​</a></h3><p><strong>想要获取请求的数据，需要通过</strong> <code>request</code>对象</p><table><thead><tr><th><strong>含义</strong></th><th><strong>语法</strong></th></tr></thead><tbody><tr><td><strong>请求方法</strong></td><td><strong>request.method</strong></td></tr><tr><td><strong>请求版本</strong></td><td><strong>request.httpVersion</strong></td></tr><tr><td><strong>请求路径</strong></td><td><strong>request.url</strong></td></tr><tr><td><strong>URL 路径</strong></td><td><strong>require(&#39;url&#39;).parse(request.url).pathname</strong></td></tr><tr><td><strong>URL 查询字符串</strong></td><td><strong>require(&#39;url&#39;).parse(request.url,true).query</strong></td></tr><tr><td><strong>请求头</strong></td><td><strong>request.headers</strong></td></tr><tr><td><strong>请求体</strong></td><td><strong>request.on(&#39;data&#39;,(chunk) =&gt; {})</strong> <strong>request.on(&#39;end&#39;,()=&gt;{})</strong></td></tr></tbody></table><p><strong>注意事项：</strong></p><ol><li><code>request.url</code>只能获取路径以及查询字符串，无法获取 URL 中的域名以及协议的内容</li><li><code>request.headers</code>将请求信息转化成一个对象，并将属性名都转化成了『小写』</li><li><strong>关于路径：如果访问网站的时候，只填写了 P 地址或者是域名信息，此时请求的路径为「</strong><code>/</code>』</li><li><strong>关于 favicon.ico：这个请求是属于浏览器自动发送的请求</strong></li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const http = require(&quot;http&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const server = http.createServer((req, res) =&gt; {</span></span>
<span class="line"><span>  let body = &#39;&#39;;</span></span>
<span class="line"><span>  req.on(&#39;data&#39;, chunk =&gt; {</span></span>
<span class="line"><span>    body += chunk;</span></span>
<span class="line"><span>  });</span></span>
<span class="line"><span>  req.on(&#39;end&#39;, () =&gt; {</span></span>
<span class="line"><span>    console.log(body);</span></span>
<span class="line"><span>  });</span></span>
<span class="line"><span>  res.end(&quot;Hello World&quot;);</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>server.listen(3000, () =&gt; {</span></span>
<span class="line"><span>  console.log(&quot;Server is running...&quot;);</span></span>
<span class="line"><span>});</span></span></code></pre></div><blockquote><p><strong>获取路径和查询字符串新方法</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const http = require(&quot;http&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const server = http.createServer((req, res) =&gt; {</span></span>
<span class="line"><span>let url = new URL(req.url, &#39;http://127.0.0.1:8080&#39;)</span></span>
<span class="line"><span>console.log(url.pathname);</span></span>
<span class="line"><span>console.log(url.searchParams.get(&#39;keyword&#39;));</span></span>
<span class="line"><span>res.end(&quot;Hello World&quot;);</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>server.listen(3000, () =&gt; {</span></span>
<span class="line"><span>console.log(&quot;Server is running...&quot;);</span></span>
<span class="line"><span>});</span></span></code></pre></div></blockquote><h3 id="设置-http-响应报文" tabindex="-1">设置 HTTP 响应报文 <a class="header-anchor" href="#设置-http-响应报文" aria-label="Permalink to &quot;设置 HTTP 响应报文&quot;">​</a></h3><table><thead><tr><th><strong>作用</strong></th><th><strong>语法</strong></th></tr></thead><tbody><tr><td><strong>设置响应状态码</strong></td><td><strong>response.statusCode</strong></td></tr><tr><td><strong>设置响应状态描述</strong></td><td><strong>response.statusMessage</strong></td></tr><tr><td><strong>设置响应头信息</strong></td><td><strong>response.setHeader(&#39;头名&#39;,&#39;头值)</strong></td></tr><tr><td><strong>设置响应体</strong></td><td><strong>response.write(&#39;xx&#39;)</strong> <strong>response.end(&#39;xxx&#39;)</strong></td></tr></tbody></table><h2 id="模块化" tabindex="-1">模块化 <a class="header-anchor" href="#模块化" aria-label="Permalink to &quot;模块化&quot;">​</a></h2><h3 id="暴露数据" tabindex="-1">暴露数据 <a class="header-anchor" href="#暴露数据" aria-label="Permalink to &quot;暴露数据&quot;">​</a></h3><p><strong>模块暴露数据的方式有两种：</strong></p><ol><li><code>module.exports = value;</code></li><li><code>exports.name = value;</code></li></ol><blockquote><p><strong>使用时有几点注意</strong></p><ul><li><code>modules.exports</code>可以暴露任意数据</li><li><strong>不能使用</strong> <code>exports = value</code>的形式暴露数据，模块内部 module 与 exports 的隐式关系 <code>exports = module.exports = {}</code></li></ul></blockquote><h3 id="导入模块" tabindex="-1">导入模块 <a class="header-anchor" href="#导入模块" aria-label="Permalink to &quot;导入模块&quot;">​</a></h3><p><strong>在模块中使用 require 传入文件路径即可引入文件</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const test = require(&#39;./me.js&#39;)</span></span></code></pre></div><p><strong>注意事项：</strong></p><ol><li><strong>对于自己创建的模块，导入时路径建议写相对路径，且不能省略</strong> <code>./</code>和 <code>../</code></li><li><code>js</code>和 <code>json</code>文件导入时可以不用写后缀，<code>c/c++</code>编写的 <code>node</code>扩展文件也可以不写后缀，但是一般用不到</li><li><strong>如果导入其他类型的文件，会以</strong> <code>js</code>文件进行处埋工</li><li><strong>如果导入的路径是个文件夹，则会首先检测该文件夹下</strong> <code>package.json</code>文件中 <code>main</code>属性对应的文件， <strong>如果</strong> <code>main</code>属性不存在，或者 <code>package.json</code>不存在，则会检测文件夹下的 <code>index.js</code>和 <code>index.json</code>, <strong>如果还是没找到，就会报错</strong></li><li><strong>导入</strong> <code>node.js</code>内置模块时，直接 <code>require</code>模块的名字即可，无需加 <code>./</code>和 <code>../</code></li></ol><blockquote><p><code>module.exports</code>、<code>exports</code>以及 <code>require</code>这些都是 CommonJS 模块化规范中的内容而 Node.js 实现了 CommonJS 模块化规范</p></blockquote><h2 id="包管理工具" tabindex="-1">包管理工具 <a class="header-anchor" href="#包管理工具" aria-label="Permalink to &quot;包管理工具&quot;">​</a></h2><h3 id="npm" tabindex="-1">npm <a class="header-anchor" href="#npm" aria-label="Permalink to &quot;npm&quot;">​</a></h3><p><strong>npm 全称 Node Package Manager，是 node.js 官方内置的包管理工具</strong></p><h4 id="初始化" tabindex="-1">初始化 <a class="header-anchor" href="#初始化" aria-label="Permalink to &quot;初始化&quot;">​</a></h4><p><strong>创建一个空目录，然后依次目录为工作目录启动命令行工具，执行</strong> <code>npm init</code></p><p><code>npm init</code>命令的作用是将文件夹初始化为一个包，交互式创建 <code>package.json</code></p><p><code>package.json</code>是包的配置文件，每个包都必须要有 <code>package.json</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>&quot;name&quot;: &quot;1&quot;, #包的名字</span></span>
<span class="line"><span>    &quot;version&quot;: &quot;1.0.0&quot;, #包的版本</span></span>
<span class="line"><span>    &quot;description&quot;: &quot;&quot;, #包的描述</span></span>
<span class="line"><span>    &quot;main&quot;: &quot;index.js&quot;, #包的入口文件</span></span>
<span class="line"><span>    &quot;scripts&quot;: { #脚本配置</span></span>
<span class="line"><span>&quot;test&quot;:</span></span>
<span class="line"><span>},</span></span>
<span class="line"><span>&quot;author&quot;: &quot;&quot;, #作者</span></span>
<span class="line"><span>&quot;license&quot;: &quot;ISC&quot; #开源证书</span></span>
<span class="line"><span>}</span></span></code></pre></div><blockquote><p><strong>注意事项：</strong></p><ol><li><strong>包名不能使用中文、大写，默认值是文件夹的名称，所以文件夹名称也不能使用中文和大写</strong></li><li><strong>版本号要求 x.x.x 的形式定义，x 必须是数字，默认值是 1.0.0</strong></li><li><strong>ISC 证书与 MIT 证书功能上是相同的</strong></li><li><code>package.json</code>可以手动创建与修改</li><li><strong>使用</strong> <code>npm init -y</code>或者 <code>npm init --yes</code>极速创建 <code>package.json</code></li></ol></blockquote><h4 id="搜索包" tabindex="-1">搜索包 <a class="header-anchor" href="#搜索包" aria-label="Permalink to &quot;搜索包&quot;">​</a></h4><p><strong>搜索包的方式有两种</strong></p><ol><li><strong>命令行</strong> <code>npm s/search 关键字</code></li><li><strong>网站搜索</strong><a href="https://www.npmjs.com/" target="_blank" rel="noreferrer">https://www.npmjs.com/</a></li></ol><h4 id="下载安装包" tabindex="-1">下载安装包 <a class="header-anchor" href="#下载安装包" aria-label="Permalink to &quot;下载安装包&quot;">​</a></h4><p><strong>我们可以通过</strong> <code>npm install</code>和 <code>npm i</code> 命令安装包</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm install &lt;包名&gt;</span></span>
<span class="line"><span>npm i &lt;包名&gt;</span></span></code></pre></div><p><strong>运行之后文件夹下会增加两个资源</strong></p><ul><li><code>node_modules</code>存放下载的包</li><li><code>package-lock.json</code>用来锁定包的版本</li></ul><h4 id="生产依赖与开发依赖" tabindex="-1">生产依赖与开发依赖 <a class="header-anchor" href="#生产依赖与开发依赖" aria-label="Permalink to &quot;生产依赖与开发依赖&quot;">​</a></h4><table><thead><tr><th><strong>类型</strong></th><th><strong>命令</strong></th><th><strong>补充</strong></th></tr></thead><tbody><tr><td><strong>生产依赖</strong></td><td><code>npm i -S npm i --save</code></td><td><strong>-S 等效于--save，-S 是默认选项</strong> <strong>包信息保存在 package.json 中</strong> <code>dependencies</code>属性</td></tr><tr><td><strong>开发依赖</strong></td><td><code>npm i -D</code> <code>npm i --save-dev</code></td><td><strong>-D 等效于--save-dev</strong> <strong>包信息保存在 package.json 中</strong> <code>devDependencies</code>属性</td></tr></tbody></table><blockquote><p><strong>开发依赖是只在开发阶段使用的依赖包，而生产依赖是开发阶段和最终上线运行阶段都用到的依赖包</strong></p></blockquote><h4 id="全局安装" tabindex="-1">全局安装 <a class="header-anchor" href="#全局安装" aria-label="Permalink to &quot;全局安装&quot;">​</a></h4><p><strong>我们可以执行安装选项-g 进行全局安装</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm i -g nodemon</span></span></code></pre></div><p><strong>全局安装后就可以在命令行的任何位置运行</strong> <code>nodemon</code>命令</p><p><strong>该命令的作用是自动重启 node 应用程序</strong></p><blockquote><p><strong>说明：</strong></p><ul><li><strong>全局安装的命令不受工作目录位置影响</strong></li><li><strong>可以通过</strong> <code>npm root -g</code>可以查看全局安装包的位置</li><li><strong>不是所有包都适合全局安装，只有全局类工具才适合，可以通过查看包的官方文档来确定安装方式</strong></li></ul></blockquote><h4 id="安装包依赖" tabindex="-1">安装包依赖 <a class="header-anchor" href="#安装包依赖" aria-label="Permalink to &quot;安装包依赖&quot;">​</a></h4><p><strong>在项目协作中有一个常用的命令就是</strong> <code>npm i</code> ，通过该命令可以依据 <code>package.json</code>和 <code>package-lock.json</code>的依赖声明安装项目依赖</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm i</span></span>
<span class="line"><span>npm install</span></span></code></pre></div><h4 id="安装指定版本的包" tabindex="-1">安装指定版本的包 <a class="header-anchor" href="#安装指定版本的包" aria-label="Permalink to &quot;安装指定版本的包&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm i &lt;包名@版本号&gt;</span></span></code></pre></div><h4 id="删除依赖" tabindex="-1">删除依赖 <a class="header-anchor" href="#删除依赖" aria-label="Permalink to &quot;删除依赖&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>## 局部删除</span></span>
<span class="line"><span>npm remove</span></span>
<span class="line"><span>npm r</span></span>
<span class="line"><span>## 全局删除</span></span>
<span class="line"><span>npm remove -g</span></span></code></pre></div><h4 id="配置命令别名" tabindex="-1">配置命令别名 <a class="header-anchor" href="#配置命令别名" aria-label="Permalink to &quot;配置命令别名&quot;">​</a></h4><p><strong>通过配置</strong> <code>package.json</code>中的 <code>scripts</code>属性可以更简单的执行命令</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>&quot;scripts&quot;:{</span></span>
<span class="line"><span>&quot;server&quot;: &quot;node server.js&quot;,</span></span>
<span class="line"><span>        &quot;start&quot;: &quot;node index.js&quot;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p><strong>配置完成之后，可以使用别名执行命令</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm run server</span></span>
<span class="line"><span>npm run start</span></span></code></pre></div><p><code>start</code>别名比较特别，使用时可以省略 <code>run</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm start</span></span></code></pre></div><blockquote><p><strong>说明：</strong></p><ul><li><code>npm start</code>是项目中常用的一个命令，一般用来启动项目</li><li><code>npm run</code>有自动向上级目录查找的特性，跟 <code>require</code>函数也一样</li><li><strong>对于陌生的项目，我们可以通过查看</strong> <code>scripts</code>属性来参考项目的一些操作</li></ul></blockquote><h3 id="cnpm" tabindex="-1">cnpm <a class="header-anchor" href="#cnpm" aria-label="Permalink to &quot;cnpm&quot;">​</a></h3><h4 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h4><p><strong>cnpm 是一个淘宝构建的 npmjs.com 的完整镜像，网址</strong><a href="https://npmmirror.com/" target="_blank" rel="noreferrer">https://npmmirror.com/</a></p><p><strong>cnpm 服务部署在国内阿里云服务器上，可以提高包的下载速度</strong></p><p><strong>官方也提供了一个全局工具包 cnpm,操作命令与 npm 大体相同</strong></p><h4 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm install -g cnpm --registry=https://registry.npmmirror.com</span></span></code></pre></div><h4 id="npm-配置淘宝镜像" tabindex="-1">npm 配置淘宝镜像 <a class="header-anchor" href="#npm-配置淘宝镜像" aria-label="Permalink to &quot;npm 配置淘宝镜像&quot;">​</a></h4><h5 id="直接配置" tabindex="-1">直接配置 <a class="header-anchor" href="#直接配置" aria-label="Permalink to &quot;直接配置&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm config set registry https://registry.npmmirror.com/</span></span></code></pre></div><h5 id="工具配置" tabindex="-1">工具配置 <a class="header-anchor" href="#工具配置" aria-label="Permalink to &quot;工具配置&quot;">​</a></h5><p><strong>使用</strong> <code>nrm</code>配置 npm 的镜像地址 <code>npm registry manager</code></p><ol><li><strong>安装 nrm</strong><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm i -g nrm</span></span></code></pre></div></li><li><strong>修改镜像</strong><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>nrm use taobao</span></span></code></pre></div></li><li><strong>检查是否配置成功</strong><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm config list</span></span></code></pre></div></li></ol><h3 id="yarn" tabindex="-1">yarn <a class="header-anchor" href="#yarn" aria-label="Permalink to &quot;yarn&quot;">​</a></h3><h4 id="介绍-1" tabindex="-1">介绍 <a class="header-anchor" href="#介绍-1" aria-label="Permalink to &quot;介绍&quot;">​</a></h4><p><strong>yarn 是由 Facebook 在 2016 年推出的新的 javascript 包管理工具，网址：</strong><a href="https://yarnpkg.com/" target="_blank" rel="noreferrer">https://yarnpkg.com/</a></p><h4 id="安装-1" tabindex="-1">安装 <a class="header-anchor" href="#安装-1" aria-label="Permalink to &quot;安装&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm i -g yarn</span></span></code></pre></div><h4 id="命令" tabindex="-1">命令 <a class="header-anchor" href="#命令" aria-label="Permalink to &quot;命令&quot;">​</a></h4><table><thead><tr><th><strong>功能</strong></th><th><strong>命令</strong></th></tr></thead><tbody><tr><td><strong>初始化</strong></td><td><strong>yarn init/yarn init -y</strong></td></tr><tr><td><strong>安装包</strong></td><td><strong>yarn add</strong> <strong>yarn add &lt;&gt; --dev</strong> <strong>yarn global add nodemon</strong></td></tr><tr><td><strong>删除包</strong></td><td><strong>yarn remove</strong> <strong>yarn global remove</strong></td></tr><tr><td><strong>安装项目依赖</strong></td><td><strong>yarn</strong></td></tr><tr><td><strong>运行命令别名</strong></td><td><strong>yarn &lt;别名&gt; #不需要添加</strong> <code>run</code></td></tr></tbody></table><h4 id="配置淘宝镜像" tabindex="-1">配置淘宝镜像 <a class="header-anchor" href="#配置淘宝镜像" aria-label="Permalink to &quot;配置淘宝镜像&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>yarn config set registry https://registry.npmmirror.com/</span></span></code></pre></div><p><strong>可以通过</strong> <code>yarn config list</code>查看 yarn 的配置项</p><h3 id="管理发布包" tabindex="-1">管理发布包 <a class="header-anchor" href="#管理发布包" aria-label="Permalink to &quot;管理发布包&quot;">​</a></h3><h4 id="创建与发布" tabindex="-1">创建与发布 <a class="header-anchor" href="#创建与发布" aria-label="Permalink to &quot;创建与发布&quot;">​</a></h4><p><strong>我们可以将自己开发的工具包发布到 npm 服务上，方便自己和其他开发者使用，操作步骤如下：</strong></p><ol><li><strong>创建文件夹，并创建文件</strong> <code>index.js</code>,在文件中声明函数，使用 <code>module.exports</code>暴露</li><li><strong>npm 初始化工具包，</strong><code>package.json</code>填写包的信息（包的名字是唯一的）</li><li><strong>注册账号</strong><a href="https://www.npmjs.com/signup" target="_blank" rel="noreferrer">https://www.npmjs.com/signup</a></li><li><strong>激活账号（一定要激活账号）</strong></li><li><strong>修改为官方的官方镜像（命令行中运行</strong> <code>nrm use npm</code>)</li><li><strong>命令行下</strong> <code>npm login</code>填写相关用户信息</li><li><strong>命令行下</strong> <code>npm publish</code>提交包<strong>👌</strong></li></ol><h4 id="更新包" tabindex="-1">更新包 <a class="header-anchor" href="#更新包" aria-label="Permalink to &quot;更新包&quot;">​</a></h4><p><strong>后续可以对自己发布的包进行更新，操作步骤如下</strong></p><ol><li><strong>更新包中的代码</strong></li><li><strong>测试代码是否可用</strong></li><li><strong>修改</strong> <code>package.json</code>中的版本号</li><li><strong>发布更新</strong><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm publish</span></span></code></pre></div></li></ol><h4 id="删除包" tabindex="-1">删除包 <a class="header-anchor" href="#删除包" aria-label="Permalink to &quot;删除包&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm unpublish</span></span></code></pre></div><h3 id="nvm" tabindex="-1">nvm <a class="header-anchor" href="#nvm" aria-label="Permalink to &quot;nvm&quot;">​</a></h3><p><strong>nvm 全称</strong> <code>Node Version Manager</code>，用来管理 node 版本的工具，方便切换不同版本的 Node.js</p><h5 id="命令-1" tabindex="-1">命令 <a class="header-anchor" href="#命令-1" aria-label="Permalink to &quot;命令&quot;">​</a></h5><table><thead><tr><th><strong>命令</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>nvm list available</strong></td><td><strong>显示所有可以下载的 Node.js 版本</strong></td></tr><tr><td><strong>nvm list</strong></td><td><strong>显示已安装的版本</strong></td></tr><tr><td><strong>nvm install 18.12.1</strong></td><td><strong>安装 18.12.1 版本的 Node.js</strong></td></tr><tr><td><strong>nvm install latest</strong></td><td><strong>安装最新版的 Node.js</strong></td></tr><tr><td><strong>nvm uninstall 18.12.1</strong></td><td><strong>删除某个版本的 Node.js</strong></td></tr><tr><td><strong>nvm use 18.12.1</strong></td><td><strong>切换 18.12.1 的 Node.js</strong></td></tr></tbody></table><h2 id="expressjs" tabindex="-1">ExpressJS <a class="header-anchor" href="#expressjs" aria-label="Permalink to &quot;ExpressJS&quot;">​</a></h2><h3 id="express-介绍" tabindex="-1">express 介绍 <a class="header-anchor" href="#express-介绍" aria-label="Permalink to &quot;express 介绍&quot;">​</a></h3><p><strong>express 是一个基于 Node.js 平台的极简、灵活的 WEB 应用开发框架，官方网址：</strong><a href="./.html">https://www.expressjs.com.cn/</a></p><p><strong>简单来说，express 就是一个封装好的工具包，封装了很多功能，便于我们开发 WEB 应用（HTTP 服务）</strong></p><h3 id="express-路由" tabindex="-1">express 路由 <a class="header-anchor" href="#express-路由" aria-label="Permalink to &quot;express 路由&quot;">​</a></h3><h4 id="什么是路由" tabindex="-1">什么是路由 <a class="header-anchor" href="#什么是路由" aria-label="Permalink to &quot;什么是路由&quot;">​</a></h4><p><strong>官方定义：路由确定了应用程序如何响应客户端对特定端点的请求</strong></p><h4 id="路由的使用" tabindex="-1">路由的使用 <a class="header-anchor" href="#路由的使用" aria-label="Permalink to &quot;路由的使用&quot;">​</a></h4><p><strong>一个路由的组成有请求方法，路径和回调函数组成</strong></p><p><strong>express 中提供了一系列方法，可以很方便的使用路由，使用格式如下：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>app.&lt;method&gt;(path,callback)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const express = require(&quot;express&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 创建应用对象</span></span>
<span class="line"><span>const app = express();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 创建路由</span></span>
<span class="line"><span>app.get(&quot;/&quot;, (req, res) =&gt; {</span></span>
<span class="line"><span>  res.send(&quot;Hello World!&quot;);</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>app.get(&quot;/test&quot;, (req, res) =&gt; {</span></span>
<span class="line"><span>  res.send(&quot;test&quot;);</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>app.all(&quot;*&quot;, (req, res) =&gt; {</span></span>
<span class="line"><span>  res.send(&quot;404&quot;);</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 监听端口号</span></span>
<span class="line"><span>app.listen(8000, () =&gt; {</span></span>
<span class="line"><span>  console.log(&quot;服务器启动成功~&quot;);</span></span>
<span class="line"><span>});</span></span></code></pre></div><h4 id="获取请求参数" tabindex="-1">获取请求参数 <a class="header-anchor" href="#获取请求参数" aria-label="Permalink to &quot;获取请求参数&quot;">​</a></h4><p><strong>express 框架封装了一些 API 来方便获取请求报文中的数据，并且兼容原生 HTTP 模块的获取方式</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const express = require(&quot;express&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 创建应用对象</span></span>
<span class="line"><span>const app = express();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 创建路由</span></span>
<span class="line"><span>app.get(&quot;/&quot;, (req, res) =&gt; {</span></span>
<span class="line"><span>  //兼容的</span></span>
<span class="line"><span>  console.log(req.method);</span></span>
<span class="line"><span>  console.log(req.url);</span></span>
<span class="line"><span>  console.log(req.httpVersion);</span></span>
<span class="line"><span>  console.log(req.headers);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  //独有的</span></span>
<span class="line"><span>  console.log(req.query);</span></span>
<span class="line"><span>  console.log(req.params);</span></span>
<span class="line"><span>  console.log(req.get(&quot;Host&quot;));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  res.send(&quot;Hello World!&quot;);</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 监听端口号</span></span>
<span class="line"><span>app.listen(8000, () =&gt; {</span></span>
<span class="line"><span>  console.log(&quot;服务器启动成功~&quot;);</span></span>
<span class="line"><span>});</span></span></code></pre></div><h4 id="获取路由参数" tabindex="-1">获取路由参数 <a class="header-anchor" href="#获取路由参数" aria-label="Permalink to &quot;获取路由参数&quot;">​</a></h4><p><strong>路由参数指的是 URL 路径中的参数</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>app.get(&quot;/:id&quot;, (req, res) =&gt; {</span></span>
<span class="line"><span>  res.send(req.params.id);</span></span>
<span class="line"><span>});</span></span></code></pre></div><h4 id="响应设置" tabindex="-1">响应设置 <a class="header-anchor" href="#响应设置" aria-label="Permalink to &quot;响应设置&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const express = require(&quot;express&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 创建应用对象</span></span>
<span class="line"><span>const app = express();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 创建路由</span></span>
<span class="line"><span>app.get(&quot;/&quot;, (req, res) =&gt; {</span></span>
<span class="line"><span>  //原生响应</span></span>
<span class="line"><span>  res.statusCode = 200;</span></span>
<span class="line"><span>  res.statusMessage = &quot;OK&quot;;</span></span>
<span class="line"><span>  res.setHeader(&quot;Content-Type&quot;, &quot;text/html;charset=utf-8&quot;);</span></span>
<span class="line"><span>  res.write(&quot;&lt;h1&gt;你好&lt;/h1&gt;&quot;);</span></span>
<span class="line"><span>  res.end(&quot;Hello World!&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // express响应</span></span>
<span class="line"><span>  res.status(200);</span></span>
<span class="line"><span>  res.set(&quot;Content-Type&quot;, &quot;text/html;charset=utf-8&quot;);</span></span>
<span class="line"><span>  res.send(&quot;&lt;h1&gt;你好&lt;/h1&gt;&quot;);</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>  //其他响应</span></span>
<span class="line"><span>  res.redirect(&quot;http://www.baidu.com&quot;);</span></span>
<span class="line"><span>  res.download(&quot;./public/1.txt&quot;);</span></span>
<span class="line"><span>  res.sendFile(__dirname + &quot;/public/1.txt&quot;);</span></span>
<span class="line"><span>  res.json({ name: &quot;zs&quot;, age: 18 });</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 监听端口号</span></span>
<span class="line"><span>app.listen(8000, () =&gt; {</span></span>
<span class="line"><span>  console.log(&quot;服务器启动成功~&quot;);</span></span>
<span class="line"><span>});</span></span></code></pre></div><h3 id="express-中间件" tabindex="-1">express 中间件 <a class="header-anchor" href="#express-中间件" aria-label="Permalink to &quot;express 中间件&quot;">​</a></h3><h4 id="什么是中间件" tabindex="-1">什么是中间件 <a class="header-anchor" href="#什么是中间件" aria-label="Permalink to &quot;什么是中间件&quot;">​</a></h4><p><strong>中间件本质是一个回调函数</strong></p><p><strong>中间件函数可以向路由回调一样访问请求对象，响应对象</strong></p><h4 id="中间件的作用" tabindex="-1">中间件的作用 <a class="header-anchor" href="#中间件的作用" aria-label="Permalink to &quot;中间件的作用&quot;">​</a></h4><p><strong>中间件的作用就是使用函数封装公共操作，简化代码</strong></p><h4 id="中间件的类型" tabindex="-1">中间件的类型 <a class="header-anchor" href="#中间件的类型" aria-label="Permalink to &quot;中间件的类型&quot;">​</a></h4><ul><li><strong>全局中间件</strong></li><li><strong>路由中间件</strong></li></ul><h5 id="全局中间件" tabindex="-1">全局中间件 <a class="header-anchor" href="#全局中间件" aria-label="Permalink to &quot;全局中间件&quot;">​</a></h5><p><strong>每一个请求到达服务端之后都会执行全局中间件函数</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 声明中间件函数</span></span>
<span class="line"><span>let recordMiddleware = function(req,res,next){</span></span>
<span class="line"><span>//实现功能代码</span></span>
<span class="line"><span>    //......</span></span>
<span class="line"><span>    //执行next函数（当如果希望执行完中间件函数之后，仍然继续执行路由中的回调函数，必须调用next）</span></span>
<span class="line"><span>    next();</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>// 使用中间件函数</span></span>
<span class="line"><span>app.use(recordMiddleware);</span></span></code></pre></div><h5 id="路由中间件" tabindex="-1">路由中间件 <a class="header-anchor" href="#路由中间件" aria-label="Permalink to &quot;路由中间件&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>app.get(&quot;/admin&quot;, recordMiddleware, (req, res) =&gt;{</span></span>
<span class="line"><span>res.send(&#39;&#39;);</span></span>
<span class="line"><span>});</span></span></code></pre></div><h4 id="静态资源中间件" tabindex="-1">静态资源中间件 <a class="header-anchor" href="#静态资源中间件" aria-label="Permalink to &quot;静态资源中间件&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>app.use(express.static(__dirname + &#39;/public&#39;));</span></span></code></pre></div><blockquote><p><strong>注意事项：</strong></p><ol><li><strong>index.html 文件为默认打开的资源</strong></li><li><strong>如果静态资源与路由规则同时匹配，谁先匹配谁就响应</strong></li><li><strong>路由响应动态资源，静态资源中间件响应静态资源</strong></li></ol></blockquote><h4 id="获取请求体数据" tabindex="-1">获取请求体数据 <a class="header-anchor" href="#获取请求体数据" aria-label="Permalink to &quot;获取请求体数据&quot;">​</a></h4><p><strong>express 可以使用</strong> <code>body-parser</code>包处理请求体</p><p><strong>安装</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm i body-parser</span></span></code></pre></div><p><strong>导入包</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const bodyParser = require(&#39;body-parser&#39;);</span></span></code></pre></div><p><strong>获取中间件函数</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 处理querystring格式的请求体</span></span>
<span class="line"><span>let urlParser = bodyParser.urlencoded({extended:false});</span></span>
<span class="line"><span>// 处理JSON格式的请求体</span></span>
<span class="line"><span>let jsonParser = bodyParser.json();</span></span></code></pre></div><p><strong>设置路由中间件，然后使用</strong> <code>request.body</code>来获取请求体数据</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>app.post(&#39;/login&#39;, urlParser, (req,res)=&gt;{</span></span>
<span class="line"><span>//请求体数据</span></span>
<span class="line"><span>    request.body;</span></span>
<span class="line"><span>    console.log(request.body.username);</span></span>
<span class="line"><span>    console.log(request.body.userpass)l</span></span>
<span class="line"><span>    res.send();</span></span>
<span class="line"><span>})</span></span></code></pre></div><h4 id="防盗链" tabindex="-1">防盗链 <a class="header-anchor" href="#防盗链" aria-label="Permalink to &quot;防盗链&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>app.use((req, res, next) =&gt; {</span></span>
<span class="line"><span>let referer = req.get(&#39;referer&#39;);</span></span>
<span class="line"><span>    if(referer){</span></span>
<span class="line"><span>let url = new URL(referer);</span></span>
<span class="line"><span>        let hostname = url.hostname;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    if(hostname !== &#39;127.0.0.1&#39;){</span></span>
<span class="line"><span>res.send(&#39;404&#39;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    next();</span></span>
<span class="line"><span>})</span></span></code></pre></div><h4 id="路由模块化" tabindex="-1">路由模块化 <a class="header-anchor" href="#路由模块化" aria-label="Permalink to &quot;路由模块化&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// adminRouter.js</span></span>
<span class="line"><span>const express = require(&#39;express&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const router = express.Router();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>router.get(&#39;/admin&#39;,(req, res) =&gt; {</span></span>
<span class="line"><span>   res.send(&#39;&#39;);</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// index.js</span></span>
<span class="line"><span>const adminRouter = require(&#39;./routes/adminRouter&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>app.use(adminRouter);</span></span></code></pre></div><h4 id="express-generator" tabindex="-1">express-generator <a class="header-anchor" href="#express-generator" aria-label="Permalink to &quot;express-generator&quot;">​</a></h4><p><strong>通过应用生成器工具 express-generator 可以快速创建一个应用的骨架</strong></p><h2 id="mongodb" tabindex="-1">MongoDB <a class="header-anchor" href="#mongodb" aria-label="Permalink to &quot;MongoDB&quot;">​</a></h2><h3 id="介绍-2" tabindex="-1">介绍 <a class="header-anchor" href="#介绍-2" aria-label="Permalink to &quot;介绍&quot;">​</a></h3><p><strong>MongoDB 是一个基于分布式文件存储的数据库，</strong><a href="https://www.mongodb.com/" target="_blank" rel="noreferrer">https://www.mongodb.com/</a></p><h3 id="核心概念" tabindex="-1">核心概念 <a class="header-anchor" href="#核心概念" aria-label="Permalink to &quot;核心概念&quot;">​</a></h3><ul><li><strong>数据库(database) 数据库是一个数据仓库，数据库服务下可以创建很多数据库，数据库中可以存放很多集合</strong></li><li><strong>集合(collection) 集合类以于 J5 中的数组，在集合中可以存放很多文档</strong></li><li><strong>文档(document) 文档是数据库中的最小单位，类似于 JS 中的对象</strong></li></ul><p><img src="`+t+`" alt="1711794002014"></p><p><strong>可以通过 JSON 文件来理解 Mongodb 中的概念</strong></p><ul><li><strong>一个 JSON 文件好比是一个数据库，一个 Mongodb 服务下可以有 N 个数据库</strong></li><li><strong>JSON 文件中的一级属性的数组值好比是集合</strong></li><li><strong>数组中的对象好比是文档</strong></li><li><strong>对象中的属性有时也称之为字段</strong></li></ul><blockquote><p><strong>一般情况下</strong></p><ul><li><strong>一个项目使用一个数据库</strong></li><li><strong>一个集合会存储同一种类型的数据</strong></li></ul></blockquote><h3 id="命令行交互" tabindex="-1">命令行交互 <a class="header-anchor" href="#命令行交互" aria-label="Permalink to &quot;命令行交互&quot;">​</a></h3><h4 id="数据库命令" tabindex="-1">数据库命令 <a class="header-anchor" href="#数据库命令" aria-label="Permalink to &quot;数据库命令&quot;">​</a></h4><p><strong>显示所有的数据库</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>show dbs</span></span></code></pre></div><p><strong>切换到指定的数据库，如果数据库不存在会自动创建数据库</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>use 数据库名</span></span></code></pre></div><p><strong>显示当前所在的数据库</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>db</span></span></code></pre></div><p><strong>删除当前数据库</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>use 库名</span></span>
<span class="line"><span>db.dropDarabase()</span></span></code></pre></div><h4 id="集合命令" tabindex="-1">集合命令 <a class="header-anchor" href="#集合命令" aria-label="Permalink to &quot;集合命令&quot;">​</a></h4><p><strong>创建集合</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>db.createCollection(&#39;集合名称&#39;)</span></span></code></pre></div><p><strong>显示当前数据库中的所有集合</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>show collections</span></span></code></pre></div><p><strong>删除某个集合</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>db.集合名.drop()</span></span></code></pre></div><p><strong>重命名集合</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>db.集合名.renameCollection(&#39;newName&#39;)</span></span></code></pre></div><h4 id="文档命令" tabindex="-1">文档命令 <a class="header-anchor" href="#文档命令" aria-label="Permalink to &quot;文档命令&quot;">​</a></h4><p><strong>插入文档</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>db.集合名.insert(文档对象);</span></span></code></pre></div><p><strong>查询文档</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>db.集合名.find(查询条件)</span></span></code></pre></div><p><code>_id是mongodb自动生成的唯一编号，用来唯一标识文档</code></p><p><strong>更新文档</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>db.集合名.update(查询条件，新的文档)</span></span>
<span class="line"><span>db.集合名.update({name:&#39;张三&#39;},{$set:{age:19}})</span></span></code></pre></div><p><strong>删除文档</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>db.集合名.remove(查询条件)</span></span></code></pre></div><h3 id="mongoose" tabindex="-1">Mongoose <a class="header-anchor" href="#mongoose" aria-label="Permalink to &quot;Mongoose&quot;">​</a></h3><h4 id="介绍-3" tabindex="-1">介绍 <a class="header-anchor" href="#介绍-3" aria-label="Permalink to &quot;介绍&quot;">​</a></h4><p><strong>Mongoose 是一个对象文档模型库</strong></p><h4 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h4><p><strong>方便使用代码操作 mongodb 数据库</strong></p><h4 id="使用流程" tabindex="-1">使用流程 <a class="header-anchor" href="#使用流程" aria-label="Permalink to &quot;使用流程&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const mongoose = require(&quot;mongoose&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mongoose.connect(&quot;mongodb://localhost:27017/test&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mongoose.connection.once(&quot;open&quot;, () =&gt; {</span></span>
<span class="line"><span>  console.log(&quot;数据库连接成功&quot;);</span></span>
<span class="line"><span>  // 创建结构对象</span></span>
<span class="line"><span>  let Schema = new mongoose.Schema({</span></span>
<span class="line"><span>    name: String,</span></span>
<span class="line"><span>    age: Number,</span></span>
<span class="line"><span>  });</span></span>
<span class="line"><span>  // 创建模型对象</span></span>
<span class="line"><span>  let Model = mongoose.model(&quot;student&quot;, Schema);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  Model.create({</span></span>
<span class="line"><span>    name: &quot;张三&quot;,</span></span>
<span class="line"><span>    age: 18,</span></span>
<span class="line"><span>  });</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mongoose.connection.on(&quot;error&quot;, (err) =&gt; {</span></span>
<span class="line"><span>  console.log(&quot;数据库连接失败&quot;, err);</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mongoose.connection.on(&quot;close&quot;, () =&gt; {</span></span>
<span class="line"><span>  console.log(&quot;数据库连接断开&quot;);</span></span>
<span class="line"><span>});</span></span></code></pre></div><h4 id="字段类型" tabindex="-1">字段类型 <a class="header-anchor" href="#字段类型" aria-label="Permalink to &quot;字段类型&quot;">​</a></h4><table><thead><tr><th><strong>类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>String</strong></td><td><strong>字符串</strong></td></tr><tr><td><strong>Number</strong></td><td><strong>数字</strong></td></tr><tr><td><strong>Boolean</strong></td><td><strong>布尔值</strong></td></tr><tr><td><strong>Array</strong></td><td><strong>数组，也可以使用</strong> <code>[]</code>来标识</td></tr><tr><td><strong>Date</strong></td><td><strong>日期</strong></td></tr><tr><td><strong>Buffer</strong></td><td><strong>Buffer 对象</strong></td></tr><tr><td><strong>Mixed</strong></td><td><strong>任意类型，需要使用</strong> <code>mongoose.Schema.Types.Mixed</code>指定</td></tr><tr><td><strong>Objectld</strong></td><td><strong>对象 ID，需要使用</strong> <code>mongoose.Schema.Types.ObjectId</code>指定</td></tr><tr><td><strong>Decimal128</strong></td><td><strong>高精度数字，需要使用</strong> <code>mongoose.Schema.Decimal128</code>指定</td></tr></tbody></table><h4 id="字段值验证" tabindex="-1">字段值验证 <a class="header-anchor" href="#字段值验证" aria-label="Permalink to &quot;字段值验证&quot;">​</a></h4><p><strong>Mongoose 有一些内建验证器，可以对字段值进行验证</strong></p><h5 id="必填项" tabindex="-1">必填项 <a class="header-anchor" href="#必填项" aria-label="Permalink to &quot;必填项&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>title: {</span></span>
<span class="line"><span>type: String,</span></span>
<span class="line"><span>    require: true</span></span>
<span class="line"><span>}</span></span></code></pre></div><h5 id="默认值" tabindex="-1">默认值 <a class="header-anchor" href="#默认值" aria-label="Permalink to &quot;默认值&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>title: {</span></span>
<span class="line"><span>type: String,</span></span>
<span class="line"><span>    default: &#39;匿名&#39;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h5 id="枚举值" tabindex="-1">枚举值 <a class="header-anchor" href="#枚举值" aria-label="Permalink to &quot;枚举值&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gender: {</span></span>
<span class="line"><span>type: String,</span></span>
<span class="line"><span>    enum: [&#39;男&#39;,&#39;女&#39;]</span></span>
<span class="line"><span>}</span></span></code></pre></div><h5 id="唯一值" tabindex="-1">唯一值 <a class="header-anchor" href="#唯一值" aria-label="Permalink to &quot;唯一值&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>title: {</span></span>
<span class="line"><span>type: String,</span></span>
<span class="line"><span>    uniqe: true</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="删除文档" tabindex="-1">删除文档 <a class="header-anchor" href="#删除文档" aria-label="Permalink to &quot;删除文档&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Model.deleteOne({</span></span>
<span class="line"><span>    name: &quot;张三&quot;,</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span>    .then((data) =&gt; {</span></span>
<span class="line"><span>    console.log(data);</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span>    .catch((err) =&gt; {</span></span>
<span class="line"><span>    console.log(err);</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Model.deleteMany({</span></span>
<span class="line"><span>    name: &quot;张三&quot;,</span></span>
<span class="line"><span>}).then((data) =&gt; {</span></span>
<span class="line"><span>    console.log(data);</span></span>
<span class="line"><span>});</span></span></code></pre></div><h4 id="更新文档" tabindex="-1">更新文档 <a class="header-anchor" href="#更新文档" aria-label="Permalink to &quot;更新文档&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Model.updateOne({ name: &quot;张三&quot; }, { age: 20 }).then((data) =&gt; {</span></span>
<span class="line"><span>    console.log(data);</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Model.updateMany({ name: &quot;张四&quot; }, { age: 20 }).then((data) =&gt; {</span></span>
<span class="line"><span>    console.log(data);</span></span>
<span class="line"><span>});</span></span></code></pre></div><h4 id="读取文档" tabindex="-1">读取文档 <a class="header-anchor" href="#读取文档" aria-label="Permalink to &quot;读取文档&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Model.findOne({ name: &quot;张三&quot; }).then((data) =&gt; {</span></span>
<span class="line"><span>    console.log(data);</span></span>
<span class="line"><span>  });</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Model.find({ name: &quot;张四&quot; }).then((data) =&gt; {</span></span>
<span class="line"><span>    console.log(data);</span></span>
<span class="line"><span>});</span></span></code></pre></div><h4 id="条件控制" tabindex="-1">条件控制 <a class="header-anchor" href="#条件控制" aria-label="Permalink to &quot;条件控制&quot;">​</a></h4><h5 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h5><p><strong>在 mongodb 不能用&gt; &lt; &gt;= &lt;= !==等运算符，需要使用替代符号</strong></p><ul><li><code>&gt;</code>使用 <code>$gt</code></li><li><code>&lt;</code>使用 <code>$lt</code></li><li><code>&gt;=</code>使用 <code>$gte</code></li><li><code>&lt;=</code>使用 <code>$lte</code></li><li><code>!==</code>使用 <code>$ne</code></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>db.students.find({id:{$gt:3}})</span></span></code></pre></div><h5 id="逻辑运算" tabindex="-1">逻辑运算 <a class="header-anchor" href="#逻辑运算" aria-label="Permalink to &quot;逻辑运算&quot;">​</a></h5><p><code>$or</code>逻辑或的情况</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>db.students.find({$or:[{age:18},{age:24}]});</span></span></code></pre></div><p><code>$and</code>逻辑与的情况</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>db.students.find({$and: [{age:{$lt:20}},{age:{$gt:15}}]});</span></span></code></pre></div><h5 id="正则匹配" tabindex="-1">正则匹配 <a class="header-anchor" href="#正则匹配" aria-label="Permalink to &quot;正则匹配&quot;">​</a></h5><p><strong>条件中可以直接使用 JS 的正则语法，通过正则可以进行模糊查询</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>db.students.find({name: new RegExp(&#39;三&#39;)});</span></span></code></pre></div><h5 id="个性化读取" tabindex="-1">个性化读取 <a class="header-anchor" href="#个性化读取" aria-label="Permalink to &quot;个性化读取&quot;">​</a></h5><h6 id="字段筛选" tabindex="-1">字段筛选 <a class="header-anchor" href="#字段筛选" aria-label="Permalink to &quot;字段筛选&quot;">​</a></h6><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>//0: 不要的字段</span></span>
<span class="line"><span>//1: 要的字段</span></span>
<span class="line"><span>Model.find()</span></span>
<span class="line"><span>    .select({ name: 1, _id: 0 })</span></span>
<span class="line"><span>    .then((docs) =&gt; {</span></span>
<span class="line"><span>      console.log(docs);</span></span>
<span class="line"><span>    });</span></span></code></pre></div><h6 id="数据排序" tabindex="-1">数据排序 <a class="header-anchor" href="#数据排序" aria-label="Permalink to &quot;数据排序&quot;">​</a></h6><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>//sort 排序</span></span>
<span class="line"><span>//1:升序</span></span>
<span class="line"><span>//-1:倒序</span></span>
<span class="line"><span> Model.find()</span></span>
<span class="line"><span>    .sort({ age: -1 })</span></span>
<span class="line"><span>    .then((docs) =&gt; {</span></span>
<span class="line"><span>      console.log(docs);</span></span>
<span class="line"><span>    });</span></span></code></pre></div><h6 id="数据截取" tabindex="-1">数据截取 <a class="header-anchor" href="#数据截取" aria-label="Permalink to &quot;数据截取&quot;">​</a></h6><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>//skip 跳过 limit 限定</span></span>
<span class="line"><span> Model.find()</span></span>
<span class="line"><span>    .skip(2)</span></span>
<span class="line"><span>    .limit(2)</span></span>
<span class="line"><span>    .then((docs) =&gt; {</span></span>
<span class="line"><span>      console.log(docs);</span></span>
<span class="line"><span>    });</span></span></code></pre></div><h2 id="接口" tabindex="-1">接口 <a class="header-anchor" href="#接口" aria-label="Permalink to &quot;接口&quot;">​</a></h2><h3 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h3><p><strong>接口是前后端通信的桥梁</strong></p><p><strong>简单理解：一个接口就是服务中的一个路由规则，根据请求响应结果</strong></p><h3 id="restful-api" tabindex="-1">RESTful API <a class="header-anchor" href="#restful-api" aria-label="Permalink to &quot;RESTful API&quot;">​</a></h3><p><strong>RESful API 是一种特殊风格的接口，主要特点有如下几个：</strong></p><ul><li><strong>URL 中的路径表示资源，路径中不能有动词，例如</strong> <code>create</code>,<code>delete</code>,<code>update</code>等这些都不能有</li><li><strong>操作资源要与 HTTP 请求方法对应</strong></li><li><strong>操作结果要与 HTTP 响应状态码对应</strong></li></ul><h3 id="json-sever" tabindex="-1">json-sever <a class="header-anchor" href="#json-sever" aria-label="Permalink to &quot;json-sever&quot;">​</a></h3><p><strong>json-sever 本身是一个 JS 编写的工具包，可以快速搭建 RESTful API 服务</strong></p><p><strong>官方地址：</strong><a href="https://github.com/typicode/json-server" target="_blank" rel="noreferrer">https://github.com/typicode/json-server</a></p><p><strong>操作步骤：</strong></p><ol><li><strong>全局安装</strong><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm i -g json-server</span></span></code></pre></div></li><li><strong>创建 JSON 文件（db.json），编写基本结构</strong><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>    &quot;song&quot;:[</span></span>
<span class="line"><span>        {&quot;id&quot;:1, &quot;name&quot;:&quot;1&quot;},</span></span>
<span class="line"><span>        {&quot;id&quot;:2, &quot;name&quot;:&quot;2&quot;},</span></span>
<span class="line"><span>        {&quot;id&quot;:3, &quot;name&quot;:&quot;3&quot;}</span></span>
<span class="line"><span>    ]</span></span>
<span class="line"><span>}</span></span></code></pre></div></li><li><strong>以 JSON 文件所在文件夹为工作目录，执行如下命令</strong><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>json-server --watch db.json</span></span></code></pre></div></li></ol><p><strong>默认监听端口为 3000</strong></p>`,349),l=[o];function i(r,c,d,g,h,u){return n(),a("div",null,l)}const m=s(p,[["render",i]]);export{q as __pageData,m as default};
