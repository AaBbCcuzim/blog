import{_ as t,c as s,o as e,a4 as n}from"./chunks/framework.ClEHkwpW.js";const b=JSON.parse('{"title":"JS","description":"","frontmatter":{},"headers":[],"relativePath":"article/js.md","filePath":"article/js.md"}'),a={name:"article/js.md"},r=n(`<h1 id="js" tabindex="-1">JS <a class="header-anchor" href="#js" aria-label="Permalink to &quot;JS&quot;">​</a></h1><h2 id="输入输出" tabindex="-1">输入输出 <a class="header-anchor" href="#输入输出" aria-label="Permalink to &quot;输入输出&quot;">​</a></h2><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th><th><strong>归属</strong></th></tr></thead><tbody><tr><td><strong>alert(msg)</strong></td><td><strong>浏览器弹出警示框</strong></td><td><strong>浏览器</strong></td></tr><tr><td><strong>console.log(msg)</strong></td><td><strong>浏览器控制台打印输出信息</strong></td><td><strong>浏览器</strong></td></tr><tr><td><strong>prompt(info)</strong></td><td><strong>浏览器弹出输入框，用户可以输入</strong></td><td><strong>浏览器</strong></td></tr></tbody></table><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><h3 id="number" tabindex="-1">Number <a class="header-anchor" href="#number" aria-label="Permalink to &quot;Number&quot;">​</a></h3><p><strong>JavaScript 中数值的最大和最小值</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Number.MAX_VALUE // 1.7976931348623157e+308</span></span>
<span class="line"><span>Number.MIN_VALUE // 5e-324</span></span></code></pre></div><p><strong>JavaScript 中数值的特殊值</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Infinity //代表正无穷大，大于任何数值</span></span>
<span class="line"><span>-Infinity //代表负无穷大，小于任何数值</span></span>
<span class="line"><span>NaN //Not a number ,代表一个非数值</span></span></code></pre></div><p><strong>isNaN()</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>isNaN() // 这个办法用来判断非数字，并返回一个值，如果是数字返回的是false，如果不是数字返回的是true</span></span></code></pre></div><p><strong>parseInt()</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>parseInt(string) // 将string类型转换成整数数值型</span></span></code></pre></div><p><strong>parseFloat()</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>parseFloat(string) // 将string类型转成浮点数数值型</span></span></code></pre></div><p><strong>Number()</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Number() // 将string类型转换为数值型</span></span></code></pre></div><p>*<em>-</em>**</p><p><strong>通过算数运算隐式转换为数值型</strong></p><h3 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-label="Permalink to &quot;String&quot;">​</a></h3><p><strong>转义符</strong></p><table><thead><tr><th><strong>转义符</strong></th><th><strong>解释说明</strong></th></tr></thead><tbody><tr><td><strong>\\n</strong></td><td><strong>换行符</strong></td></tr><tr><td>****</td><td><strong>斜杠</strong></td></tr><tr><td>**&#39;**</td><td><strong>单引号</strong></td></tr><tr><td>**&quot;**</td><td><strong>双引号</strong></td></tr><tr><td>**t**</td><td><strong>tab 缩进</strong></td></tr><tr><td>**b**</td><td><strong>空格</strong></td></tr></tbody></table><p>**.****length**</p><p><strong>可以通过字符串变量的属性 length 获取整个字符串的长度</strong></p><p><strong>+</strong></p><p><strong>多个字符串之间可以使用+进行拼接，其拼接方式为字符串+任何类型=拼接之后的新字符串</strong></p><p><strong>拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串</strong></p><p><strong>String()</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>String() //转换成字符串</span></span></code></pre></div><p><strong>.toString()</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>变量.toString() //转成字符串</span></span></code></pre></div><h3 id="boolean" tabindex="-1">Boolean <a class="header-anchor" href="#boolean" aria-label="Permalink to &quot;Boolean&quot;">​</a></h3><p><strong>布尔型和数字型相加的时候，true 的值为 1，false 的值为 0</strong></p><p><strong>Boolean()</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Boolean() // 其他类型转成布尔值 代表空，否定的值会被转换成false，如&#39;&#39;、NaN、null、undefined 气郁质都会被转换为true</span></span></code></pre></div><h3 id="undefined" tabindex="-1">Undefined <a class="header-anchor" href="#undefined" aria-label="Permalink to &quot;Undefined&quot;">​</a></h3><p><strong>变量声明后未赋值</strong></p><h3 id="null" tabindex="-1">Null <a class="header-anchor" href="#null" aria-label="Permalink to &quot;Null&quot;">​</a></h3><p><strong>变量声明后为空值</strong></p><h3 id="typeof" tabindex="-1">typeof <a class="header-anchor" href="#typeof" aria-label="Permalink to &quot;typeof&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>typeof 变量 //获取检测变量的数据类型</span></span></code></pre></div><h2 id="math" tabindex="-1">Math <a class="header-anchor" href="#math" aria-label="Permalink to &quot;Math&quot;">​</a></h2><p><strong>Math 所有属性和方法都是静态的</strong></p><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>Math.PI</strong></td><td><strong>圆周率</strong></td></tr><tr><td><strong>Math.floor()</strong></td><td><strong>向下取整</strong></td></tr><tr><td><strong>Math.ceil()</strong></td><td><strong>向上取整</strong></td></tr><tr><td><strong>Math.round()</strong></td><td><strong>四舍五入</strong></td></tr><tr><td><strong>Math.abs()</strong></td><td><strong>绝对值</strong></td></tr><tr><td><strong>Math.max()</strong></td><td><strong>最大值</strong></td></tr><tr><td><strong>Math.min()</strong></td><td><strong>最小值</strong></td></tr><tr><td><strong>Math.random()</strong></td><td><strong>随机数 返回[0,1)的浮点数</strong></td></tr></tbody></table><blockquote><p><strong>返回包含两个数在内的区间的随机整数：</strong></p><p><strong>Math.random()*(max-min+1)+min; // max 右边界,min 左边界</strong></p></blockquote><h2 id="date" tabindex="-1">Date <a class="header-anchor" href="#date" aria-label="Permalink to &quot;Date&quot;">​</a></h2><p><strong>需要调用 Date()构造函数来实例化日期对象</strong></p><blockquote><p><strong>new Date(); // 返回当前时间</strong></p><p><strong>new Date(&#39;2023-1-25&#39;); //返回参数里面的时间</strong></p></blockquote><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>getFullYear()</strong></td><td><strong>获取当年</strong></td></tr><tr><td><strong>getMonth()</strong></td><td><strong>获取当月（0-11）</strong></td></tr><tr><td><strong>getData()</strong></td><td><strong>获取当天日期</strong></td></tr><tr><td><strong>getDay()</strong></td><td><strong>获取星期几（周日 0 到周六 6）</strong></td></tr><tr><td><strong>getHours()</strong></td><td><strong>获取当前小时</strong></td></tr><tr><td><strong>getMinutes()</strong></td><td><strong>获取当前分钟</strong></td></tr><tr><td><strong>getSeconds()</strong></td><td><strong>获取当前秒钟</strong></td></tr><tr><td><strong>valueOf()</strong></td><td><strong>获取总的毫秒数</strong></td></tr><tr><td><strong>getTime()</strong></td><td><strong>获取总的毫秒数</strong></td></tr></tbody></table><blockquote><p><strong>+new Date(); // 返回总的毫秒数</strong></p><p><strong>H5 新增 Date.now()返回总的毫秒数</strong></p></blockquote><h2 id="array" tabindex="-1">Array <a class="header-anchor" href="#array" aria-label="Permalink to &quot;Array&quot;">​</a></h2><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>Array.isArray()</strong></td><td><strong>检测是否为数组返回布尔值</strong></td></tr><tr><td><strong>push()</strong></td><td><strong>数组末尾添加元素并会返回新数组长度</strong></td></tr><tr><td><strong>unshift()</strong></td><td><strong>数组前面添加元素并会返回新数组长度</strong></td></tr><tr><td><strong>pop()</strong></td><td><strong>数组末尾删除元素并会返回删除的元素</strong></td></tr><tr><td><strong>shift()</strong></td><td><strong>数组前面删除元素并会返回删除的元素</strong></td></tr><tr><td><strong>reverse()</strong></td><td><strong>翻转数组</strong></td></tr><tr><td><strong>sort()</strong></td><td><strong>数组排序</strong></td></tr><tr><td><strong>indexOf()</strong></td><td><strong>从前往后查找指定元素的第一个索引号 如果不存在返回-1</strong></td></tr><tr><td><strong>lastIndexOf()</strong></td><td><strong>从后往前查找指定元素的第一个索引号 如果不存在返回-1</strong></td></tr><tr><td><strong>toString()</strong></td><td><strong>将数组转换为字符串</strong></td></tr><tr><td><strong>join(&#39;分隔符&#39;)</strong></td><td><strong>将数组转换为字符串并规定间隔符样式</strong></td></tr><tr><td><strong>concat()</strong></td><td><strong>连接两个或多个数组 不影响元素组 返回一个新的数组</strong></td></tr><tr><td><strong>slice()</strong></td><td><strong>数组截取 slice(begin,end) 返回被截取的新数组</strong></td></tr><tr><td><strong>splice()</strong></td><td><strong>数组删除 splice(第几个开始，要删除几个数) 返回被删除的新数组 注意，这个会影响原数组</strong></td></tr></tbody></table><blockquote><p><strong>instanceof:</strong></p><p><strong>obj instansceof Array 检测是否为数组返回布尔值</strong></p><p><strong>sort():</strong></p><p><strong>sort(function(a,b) {</strong></p><p>** **return a - b; // 升序</p><p>** **return b - a; // 降序</p><p><strong>});</strong></p></blockquote><h2 id="string-1" tabindex="-1">String <a class="header-anchor" href="#string-1" aria-label="Permalink to &quot;String&quot;">​</a></h2><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>indexOf(&#39;要查找的字符&#39;,开始的位置)</strong></td><td><strong>返回指定内容在原字符串中第一次出现的位置，如果找不到就返回-1</strong></td></tr><tr><td><strong>lastIndexOf()</strong></td><td><strong>从后往前，同 indexOf()一样</strong></td></tr><tr><td><strong>charAt(index)</strong></td><td><strong>返回指定位置的字符</strong></td></tr><tr><td><strong>charCodeAt(index)</strong></td><td><strong>获取指定位置处字符的 ASCII 码</strong></td></tr><tr><td><strong>concat()</strong></td><td><strong>连接两个或多个字符串</strong></td></tr><tr><td><strong>substr(start,length)</strong></td><td><strong>截取从 start 开始长 length 的字符串</strong></td></tr><tr><td><strong>slice(start,end)</strong></td><td><strong>从 start 开始，截取到 end，end 取不到</strong></td></tr><tr><td><strong>substring(start,end)</strong></td><td><strong>从 start 开始，截取到 end，end 取不到</strong></td></tr><tr><td><strong>replace(&#39;被替换的字符&#39;,&#39;替换为的字符&#39;)</strong></td><td><strong>替换符合条件的第一个字符</strong></td></tr><tr><td><strong>split(&#39;分隔符&#39;)</strong></td><td><strong>转换为数组</strong></td></tr></tbody></table><blockquote><p><strong>str[index] // 获取指定位置处字符 H5 新增</strong></p></blockquote><h2 id="dom" tabindex="-1">DOM <a class="header-anchor" href="#dom" aria-label="Permalink to &quot;DOM&quot;">​</a></h2><h3 id="console" tabindex="-1">console <a class="header-anchor" href="#console" aria-label="Permalink to &quot;console&quot;">​</a></h3><h4 id="dir" tabindex="-1">dir <a class="header-anchor" href="#dir" aria-label="Permalink to &quot;dir&quot;">​</a></h4><p><strong>打印返回的元素对象，更好的查看里面的属性和方法</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>console.dir()</span></span></code></pre></div><h3 id="getelementbyid" tabindex="-1">getElementById <a class="header-anchor" href="#getelementbyid" aria-label="Permalink to &quot;getElementById&quot;">​</a></h3><p><strong>通过 id 属性获取元素</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>document.getElementById()</span></span></code></pre></div><h3 id="getelementsbytagname" tabindex="-1">getElementsByTagName <a class="header-anchor" href="#getelementsbytagname" aria-label="Permalink to &quot;getElementsByTagName&quot;">​</a></h3><p><strong>返回带有指定标签名的对象的集合</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>document.getElementsByTagName()</span></span>
<span class="line"><span>element.getElementsByTagName()</span></span></code></pre></div><h3 id="getelementsbyclassname" tabindex="-1">getElementsByClassName <a class="header-anchor" href="#getelementsbyclassname" aria-label="Permalink to &quot;getElementsByClassName&quot;">​</a></h3><p><strong>通过类名获取元素集合</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>document.getElementsByClassName()</span></span></code></pre></div><h3 id="queryselector" tabindex="-1">querySelector <a class="header-anchor" href="#queryselector" aria-label="Permalink to &quot;querySelector&quot;">​</a></h3><p><strong>返回指定选择器的第一个元素</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>document.querySelector()</span></span></code></pre></div><ul><li><strong>区分选择器需要加上对应的符号</strong></li></ul><h3 id="queryselectorall" tabindex="-1">querySelectorAll <a class="header-anchor" href="#queryselectorall" aria-label="Permalink to &quot;querySelectorAll&quot;">​</a></h3><p><strong>返回指定选择器的所有元素对象集合</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>document.querySelectorAll()</span></span></code></pre></div><h3 id="body" tabindex="-1">body <a class="header-anchor" href="#body" aria-label="Permalink to &quot;body&quot;">​</a></h3><p><strong>返回 body 元素对象</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>document.body</span></span></code></pre></div><h3 id="documentelement" tabindex="-1">documentElement <a class="header-anchor" href="#documentelement" aria-label="Permalink to &quot;documentElement&quot;">​</a></h3><p><strong>返回 html 元素对象</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>document.documentElement</span></span></code></pre></div><h3 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h3><table><thead><tr><th><strong>事件</strong></th><th><strong>触发条件</strong></th></tr></thead><tbody><tr><td><strong>onclick</strong></td><td><strong>鼠标点击左键触发</strong></td></tr><tr><td><strong>onmouseover</strong></td><td><strong>鼠标经过触发。经过自身盒子和子盒子都会触发</strong></td></tr><tr><td><strong>onmouseenter</strong></td><td><strong>鼠标经过触发。只经过自身盒子触发</strong></td></tr><tr><td><strong>onmouseout</strong></td><td><strong>鼠标离开触发</strong></td></tr><tr><td><strong>onfocus</strong></td><td><strong>获得鼠标焦点触发</strong></td></tr><tr><td><strong>onblur</strong></td><td><strong>失去鼠标焦点触发</strong></td></tr><tr><td><strong>onmousemove</strong></td><td><strong>鼠标移动触发</strong></td></tr><tr><td><strong>onmouseup</strong></td><td><strong>鼠标弹起触发</strong></td></tr><tr><td><strong>onmousedown</strong></td><td><strong>鼠标按下触发</strong></td></tr><tr><td><strong>onkeyup</strong></td><td><strong>某个键盘按键被松开时触发</strong></td></tr><tr><td><strong>onkeydown</strong></td><td><strong>某个键盘按键被按下时触发</strong></td></tr><tr><td><strong>onkeypress</strong></td><td><strong>某个键盘按键被按下时触发 但它不识别功能键 （ctrl,shift 等）</strong></td></tr><tr><td><strong>onscroll</strong></td><td><strong>滚动条变化时触发</strong></td></tr></tbody></table><blockquote><p><strong>如果使用 addEventListener 上述事件不需要加 on</strong></p></blockquote><table><thead><tr><th><strong>事件</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>contextmenu</strong></td><td><strong>右键菜单（通常用于禁用右键菜单）</strong></td></tr><tr><td><strong>selectstart</strong></td><td><strong>选中文字（通常用于禁止选中文字）</strong></td></tr></tbody></table><h4 id="addeventlistener" tabindex="-1">addEventListener <a class="header-anchor" href="#addeventlistener" aria-label="Permalink to &quot;addEventListener&quot;">​</a></h4><p><strong>注册事件</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>eventTarget.addEventListener(type,listener[,useCapture])</span></span></code></pre></div><ul><li><strong>type：事件类型字符串，比如 click、mouseover，注意这里不要带 on</strong></li><li><strong>listener：事件处理函数，事件发生时，会调用该监听函数</strong></li><li><strong>useCapture：可选参数，是一个布尔值，默认是 false。</strong></li></ul><h4 id="removeeventlistener" tabindex="-1">removeEventListener <a class="header-anchor" href="#removeeventlistener" aria-label="Permalink to &quot;removeEventListener&quot;">​</a></h4><p><strong>删除事件</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>eventTarget.removeEventListener(type,listener[,useCapture])</span></span></code></pre></div><table><thead><tr><th><strong>事件对象属性方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>e.target</strong></td><td><strong>返回触发事件的对象 标准</strong></td></tr><tr><td><strong>e.srcElement</strong></td><td><strong>返回触发事件的对象 非标准 ie6-8</strong></td></tr><tr><td><strong>e.type</strong></td><td><strong>返回事件的类型</strong></td></tr><tr><td><strong>e.cancelBubble</strong></td><td><strong>该属性阻止冒泡 非标准 ie6-8</strong></td></tr><tr><td><strong>e.returnValue</strong></td><td><strong>该属性阻止默认事件（默认行为）非标准 ie6-8 比如不让链接跳转</strong></td></tr><tr><td><strong>e.preventDefault()</strong></td><td><strong>该方法阻止默认事件（默认行为）标准 比如不让跳转链接</strong></td></tr><tr><td><strong>e.stopPropagation()</strong></td><td><strong>阻止冒泡 标准</strong></td></tr><tr><td><strong>e.clientX</strong></td><td><strong>返回鼠标相对于浏览器窗口可视区的 X 坐标</strong></td></tr><tr><td><strong>e.clientY</strong></td><td><strong>返回鼠标相对于浏览器窗口可视区的 Y 坐标</strong></td></tr><tr><td><strong>e.pageX</strong></td><td><strong>返回鼠标相对于文档页面的 X 坐标</strong></td></tr><tr><td><strong>e.pageY</strong></td><td><strong>返回鼠标相对于文档页面的 Y 坐标</strong></td></tr><tr><td><strong>e.screenX</strong></td><td><strong>返回鼠标相对于电脑屏幕的 X 坐标</strong></td></tr><tr><td><strong>e.screenY</strong></td><td><strong>返回鼠标相对于电脑屏幕的 Y 坐标</strong></td></tr><tr><td><strong>e.keyCode</strong></td><td><strong>返回该键的 ASCII 值</strong></td></tr></tbody></table><ul><li><strong>e.keyCode 返回的 ASCII 码，onkeydown 和 onkeyup 不区分字母大小写，onkeypress 区分字母大小写</strong></li></ul><h3 id="innertext" tabindex="-1">innerText <a class="header-anchor" href="#innertext" aria-label="Permalink to &quot;innerText&quot;">​</a></h3><p><strong>从起始位置到终止位置的内容，但它去除 html 标签，同时空格和换行也会去掉</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>element.innerText</span></span></code></pre></div><h3 id="innerhtml" tabindex="-1">innerHTML <a class="header-anchor" href="#innerhtml" aria-label="Permalink to &quot;innerHTML&quot;">​</a></h3><p><strong>从起始位置到终止位置的内容，包括 html 标签，同时保留空格和换行</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>element.innerHTML</span></span></code></pre></div><h3 id="修改元素属性" tabindex="-1">修改元素属性 <a class="header-anchor" href="#修改元素属性" aria-label="Permalink to &quot;修改元素属性&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>元素.属性 = &#39;&#39; //自带的</span></span></code></pre></div><blockquote><p><strong>H5 新增自定义属性：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>element.dataset.属性</span></span>
<span class="line"><span>element.dataset[&#39;属性&#39;]</span></span></code></pre></div><ul><li><strong>H5 规定所有自定义属性以 data-开头</strong></li><li><strong>dataset 是一个存放了所有以 data-开头的自定义属性集合</strong></li></ul></blockquote><h3 id="修改样式属性" tabindex="-1">修改样式属性 <a class="header-anchor" href="#修改样式属性" aria-label="Permalink to &quot;修改样式属性&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>element.style.css样式 = &#39;&#39;</span></span>
<span class="line"><span>element.className = &#39;&#39;</span></span></code></pre></div><ul><li><strong>JS 里面的样式采取驼峰命名法 比如 fontSize、backgroundColor</strong></li><li><strong>JS 修改 style 样式操作，产生的是行内样式，css 权重比较高</strong></li><li><strong>className 会直接更改元素的类名，会覆盖原先的类名</strong></li></ul><h3 id="getattribute" tabindex="-1">getAttribute <a class="header-anchor" href="#getattribute" aria-label="Permalink to &quot;getAttribute&quot;">​</a></h3><p><strong>获取自定义的属性</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>element.getAttribute(&#39;属性&#39;);</span></span></code></pre></div><h3 id="setattribute" tabindex="-1">setAttribute <a class="header-anchor" href="#setattribute" aria-label="Permalink to &quot;setAttribute&quot;">​</a></h3><p><strong>修改自定义属性</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>element.setAttribute(&#39;属性&#39;,&#39;值&#39;);</span></span></code></pre></div><h3 id="removeattribute" tabindex="-1">removeAttribute <a class="header-anchor" href="#removeattribute" aria-label="Permalink to &quot;removeAttribute&quot;">​</a></h3><p><strong>移除自定义属性</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>element.removeAttribute(&#39;属性&#39;,&#39;值&#39;);</span></span></code></pre></div><h3 id="节点" tabindex="-1">节点 <a class="header-anchor" href="#节点" aria-label="Permalink to &quot;节点&quot;">​</a></h3><h4 id="parentnode" tabindex="-1">parentNode <a class="header-anchor" href="#parentnode" aria-label="Permalink to &quot;parentNode&quot;">​</a></h4><p><strong>获取元素的父级节点</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>element.parentNode</span></span></code></pre></div><ul><li><strong>返回最近的一个父节点</strong></li><li><strong>如果指定的节点没有父节点则返回 null</strong></li></ul><h4 id="childnodes" tabindex="-1">childNodes <a class="header-anchor" href="#childnodes" aria-label="Permalink to &quot;childNodes&quot;">​</a></h4><p><strong>获取元素的子级节点</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>element.childNodes</span></span></code></pre></div><ul><li><strong>返回值里面包含了所有的子节点，包括元素节点，文本节点</strong></li></ul><h4 id="children" tabindex="-1">children <a class="header-anchor" href="#children" aria-label="Permalink to &quot;children&quot;">​</a></h4><p><strong>获取元素的子级节点</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>element.children</span></span></code></pre></div><ul><li><strong>获取所有的子元素节点</strong></li></ul><h4 id="firstchild" tabindex="-1">firstChild <a class="header-anchor" href="#firstchild" aria-label="Permalink to &quot;firstChild&quot;">​</a></h4><p><strong>返回第一个子节点</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>element.firstchild</span></span></code></pre></div><ul><li><strong>返回所有的节点，找不到则返回 null</strong></li></ul><h4 id="firstelementchild" tabindex="-1">firstElementChild <a class="header-anchor" href="#firstelementchild" aria-label="Permalink to &quot;firstElementChild&quot;">​</a></h4><p><strong>返回第一个子元素节点</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>element.firstElementChild</span></span></code></pre></div><ul><li><strong>返回子元素节点，找不到则返回 null</strong></li></ul><h4 id="lastchild" tabindex="-1">lastChild <a class="header-anchor" href="#lastchild" aria-label="Permalink to &quot;lastChild&quot;">​</a></h4><p><strong>返回最后一个子节点</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>element.lastChild</span></span></code></pre></div><ul><li><strong>返回所有的节点，找不到则返回 null</strong></li></ul><h4 id="lastelementchild" tabindex="-1">lastElementChild <a class="header-anchor" href="#lastelementchild" aria-label="Permalink to &quot;lastElementChild&quot;">​</a></h4><p><strong>返回最后一个子元素节点</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>element.lastElementChild</span></span></code></pre></div><ul><li><strong>返回子元素节点，找不到则返回 null</strong></li></ul><h4 id="nextsibling" tabindex="-1">nextSibling <a class="header-anchor" href="#nextsibling" aria-label="Permalink to &quot;nextSibling&quot;">​</a></h4><p><strong>返回当前元素的下一个兄弟节点</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>element.nextSibling</span></span></code></pre></div><ul><li><strong>下一个兄弟节点包含元素节点或者文本节点等</strong></li></ul><h4 id="nextelementsibling" tabindex="-1">nextElementSibling <a class="header-anchor" href="#nextelementsibling" aria-label="Permalink to &quot;nextElementSibling&quot;">​</a></h4><p><strong>返回当前元素的下一个兄弟节点</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>element.nextElementSibling</span></span></code></pre></div><ul><li><strong>下一个兄弟元素节点</strong></li></ul><h4 id="previoussibling" tabindex="-1">previousSibling <a class="header-anchor" href="#previoussibling" aria-label="Permalink to &quot;previousSibling&quot;">​</a></h4><p><strong>返回当前元素的上一个兄弟节点</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>element.previousSibling</span></span></code></pre></div><ul><li><strong>上一个兄弟节点包含元素节点或者文本节点等</strong></li></ul><h4 id="previouselementsibling" tabindex="-1">previousElementSibling <a class="header-anchor" href="#previouselementsibling" aria-label="Permalink to &quot;previousElementSibling&quot;">​</a></h4><p><strong>返回当前元素的上一个兄弟节点</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>element.previousElementSibling</span></span></code></pre></div><ul><li><strong>上一个兄弟元素节点</strong></li></ul><h4 id="createelement" tabindex="-1">createElement <a class="header-anchor" href="#createelement" aria-label="Permalink to &quot;createElement&quot;">​</a></h4><p><strong>创建元素节点</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>document.createElement(&#39;tagName&#39;)</span></span></code></pre></div><h4 id="appendchild" tabindex="-1">appendChild <a class="header-anchor" href="#appendchild" aria-label="Permalink to &quot;appendChild&quot;">​</a></h4><p><strong>添加元素节点</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>node.appendChild(child)</span></span></code></pre></div><ul><li><strong>将节点添加到指定父节点的子节点列表末尾</strong></li></ul><h4 id="insertbefore" tabindex="-1">insertBefore <a class="header-anchor" href="#insertbefore" aria-label="Permalink to &quot;insertBefore&quot;">​</a></h4><p><strong>添加元素节点</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>node.insertBefore(child,指定元素)</span></span></code></pre></div><ul><li><strong>将节点添加到父节点的指定子节点前面</strong></li></ul><h4 id="removechild" tabindex="-1">removeChild <a class="header-anchor" href="#removechild" aria-label="Permalink to &quot;removeChild&quot;">​</a></h4><p><strong>删除元素节点</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>node.removeChild(child)</span></span></code></pre></div><ul><li><strong>删除一个子结点，返回删除的节点</strong></li></ul><h4 id="clonenode" tabindex="-1">cloneNode <a class="header-anchor" href="#clonenode" aria-label="Permalink to &quot;cloneNode&quot;">​</a></h4><p><strong>克隆节点</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>node.cloneNode()</span></span></code></pre></div><ul><li><strong>如果括号参数为空或者为 false，则是浅拷贝，即只克隆复制节点本身，不克隆里面的子节点、</strong></li><li><strong>如果括号参数为 true，则是深度拷贝，会复制节点本身以及里面的所有子节点</strong></li></ul><h3 id="write" tabindex="-1">write <a class="header-anchor" href="#write" aria-label="Permalink to &quot;write&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>document.write()</span></span></code></pre></div><ul><li><strong>直接将内容写入页面的内容流，但是文档流执行完毕，则它会导致页面全部重绘</strong></li></ul><h3 id="offset" tabindex="-1">offset <a class="header-anchor" href="#offset" aria-label="Permalink to &quot;offset&quot;">​</a></h3><p><strong>偏移量</strong></p><ul><li><strong>获取元素距离带有定位父元素的位置</strong></li><li><strong>获取元素自身的大小</strong></li><li><strong>返回的数值不带单位</strong></li></ul><table><thead><tr><th><strong>属性</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>element.offsetParent</strong></td><td><strong>返回作为该元素带有定位的父级元素 如果父级都没有定位则返回 body</strong></td></tr><tr><td><strong>element.offsetTop</strong></td><td><strong>返回元素相对带有定位父元素上方的偏移</strong></td></tr><tr><td><strong>element.offsetLeft</strong></td><td><strong>返回元素相对带有定位父元素左边框的偏移</strong></td></tr><tr><td><strong>element.offsetWidth</strong></td><td><strong>返回自身包括 padding、边框、内容区的宽度，返回数值不带单位</strong></td></tr><tr><td><strong>element.offsetHeight</strong></td><td><strong>返回自身包括 padding、边框、内容区的高度，返回数值不带单位</strong></td></tr></tbody></table><h3 id="client" tabindex="-1">client <a class="header-anchor" href="#client" aria-label="Permalink to &quot;client&quot;">​</a></h3><p><strong>可视区</strong></p><table><thead><tr><th><strong>属性</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>element.clientTop</strong></td><td><strong>返回元素上边框的大小</strong></td></tr><tr><td><strong>element.clientLeft</strong></td><td><strong>返回元素左边框的大小</strong></td></tr><tr><td><strong>element.clientWidth</strong></td><td><strong>返回自身包括 padding、内容区的宽度，不含边框，返回数值不带单位</strong></td></tr><tr><td><strong>element.clientHeight</strong></td><td><strong>返回自身包括 padding、内容区的高度，不含边框，返回数值不带单位</strong></td></tr></tbody></table><h3 id="scroll" tabindex="-1">scroll <a class="header-anchor" href="#scroll" aria-label="Permalink to &quot;scroll&quot;">​</a></h3><p><strong>滚动</strong></p><table><thead><tr><th><strong>属性</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>element.scrollTop</strong></td><td><strong>返回被卷去的上侧距离，返回数值不带单位</strong></td></tr><tr><td><strong>element.scrollLeft</strong></td><td><strong>返回被卷去的左侧距离，返回数值不带单位</strong></td></tr><tr><td><strong>element.scrollWidth</strong></td><td><strong>返回自身实际的宽度，不含边框，返回数值不带单位</strong></td></tr><tr><td><strong>element.scrollHeight</strong></td><td><strong>返回自身实际的宽度，不含边框，返回数值不带单位</strong></td></tr></tbody></table><h2 id="bom" tabindex="-1">BOM <a class="header-anchor" href="#bom" aria-label="Permalink to &quot;BOM&quot;">​</a></h2><h3 id="事件-1" tabindex="-1">事件 <a class="header-anchor" href="#事件-1" aria-label="Permalink to &quot;事件&quot;">​</a></h3><table><thead><tr><th><strong>事件</strong></th><th><strong>触发条件</strong></th></tr></thead><tbody><tr><td><strong>onload</strong></td><td><strong>窗口加载事件。当文档内容完全加载完成会触发该事件（包括图像、脚本文件、CSS 文件等），就调用的处理函数</strong></td></tr><tr><td><strong>DOMContentLoaded</strong></td><td><strong>窗口加载事件。当文档内容完全加载完成会触发该事件（不包括图像、flash、CSS 文件等），就调用的处理函数</strong></td></tr><tr><td><strong>onresize</strong></td><td><strong>窗口大小变化触发</strong></td></tr></tbody></table><table><thead><tr><th><strong>事件对象属性方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>window.innerWidth</strong></td><td><strong>当前屏幕的宽度</strong></td></tr></tbody></table><h3 id="settimeout" tabindex="-1">setTimeout <a class="header-anchor" href="#settimeout" aria-label="Permalink to &quot;setTimeout&quot;">​</a></h3><p><strong>定时器</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>window.setTimeout(调用函数,[延迟的毫秒数])</span></span></code></pre></div><ul><li><strong>执行一次调用函数</strong></li><li><strong>window 可以省略</strong></li><li><strong>调用函数可以直接写函数，或者写函数名或者采取字符串&#39;函数名()&#39;三种形式</strong></li><li><strong>延迟的毫秒数省略默认时 0</strong></li><li><strong>定时器可以赋值给一个标识符</strong></li></ul><h3 id="cleartimeout" tabindex="-1">clearTimeout <a class="header-anchor" href="#cleartimeout" aria-label="Permalink to &quot;clearTimeout&quot;">​</a></h3><p><strong>停止定时器</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>window.clearTimeout(timeoutID)</span></span></code></pre></div><h3 id="setinterval" tabindex="-1">setInterval <a class="header-anchor" href="#setinterval" aria-label="Permalink to &quot;setInterval&quot;">​</a></h3><p><strong>定时器</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>window.setInterval(调用函数,[延迟的毫秒数])</span></span></code></pre></div><ul><li><strong>反复执行调用函数</strong></li><li><strong>window 可以省略</strong></li><li><strong>调用函数可以直接写函数，或者写函数名或者采取字符串&#39;函数名()&#39;三种形式</strong></li><li><strong>延迟的毫秒数省略默认时 0</strong></li><li><strong>定时器可以赋值给一个标识符</strong></li></ul><h3 id="clearinterval" tabindex="-1">clearInterval <a class="header-anchor" href="#clearinterval" aria-label="Permalink to &quot;clearInterval&quot;">​</a></h3><p><strong>停止定时器</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>window.clearInterval(timeoutID)</span></span></code></pre></div><h3 id="location" tabindex="-1">location <a class="header-anchor" href="#location" aria-label="Permalink to &quot;location&quot;">​</a></h3><table><thead><tr><th><strong>对象属性</strong></th><th><strong>返回值</strong></th></tr></thead><tbody><tr><td><strong>location.href</strong></td><td><strong>获取或设置 整个 URL</strong></td></tr><tr><td><strong>location.host</strong></td><td><strong>返回主机（域名）</strong></td></tr><tr><td><strong>location.port</strong></td><td><strong>返回端口号 如果未写返回空字符串</strong></td></tr><tr><td><strong>location.pathname</strong></td><td><strong>返回路径</strong></td></tr><tr><td><strong>location.search</strong></td><td><strong>返回参数</strong></td></tr><tr><td><strong>location.hash</strong></td><td><strong>返回片段 #后面内容</strong></td></tr></tbody></table><table><thead><tr><th><strong>对象方法</strong></th><th><strong>返回值</strong></th></tr></thead><tbody><tr><td><strong>location.assign()</strong></td><td><strong>跟 href 一样，可以跳转页面</strong></td></tr><tr><td><strong>location.replace()</strong></td><td><strong>替换当前页面，以为不记录历史，所以不能后退页面</strong></td></tr><tr><td><strong>location.reload()</strong></td><td><strong>重新加载页面，相当于刷新按钮</strong></td></tr></tbody></table><h3 id="navigator" tabindex="-1">navigator <a class="header-anchor" href="#navigator" aria-label="Permalink to &quot;navigator&quot;">​</a></h3><h3 id="history" tabindex="-1">history <a class="header-anchor" href="#history" aria-label="Permalink to &quot;history&quot;">​</a></h3><table><thead><tr><th><strong>对象方法</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>history.back()</strong></td><td><strong>可以后退功能</strong></td></tr><tr><td><strong>history.forward()</strong></td><td><strong>前进功能</strong></td></tr><tr><td><strong>history.go(参数)</strong></td><td><strong>前进后退功能 参数如果是 1 前进 1 个页面如果是-1 后退一个页面</strong></td></tr></tbody></table>`,218),o=[r];function d(l,i,g,p,h,c){return e(),s("div",null,o)}const m=t(a,[["render",d]]);export{b as __pageData,m as default};
